{"version":3,"file":"ShareClient.js","sourceRoot":"","sources":["../../src/ShareClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { HttpResponse, isNode } from \"@azure/core-http\";\nimport { CanonicalCode } from \"@opentelemetry/api\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport {\n  DeleteSnapshotsOptionType,\n  DirectoryCreateResponse,\n  DirectoryDeleteResponse,\n  FileCreateResponse,\n  FileDeleteResponse,\n  ShareCreatePermissionResponse,\n  ShareCreateResponse,\n  ShareCreateSnapshotResponse,\n  ShareDeleteResponse,\n  ShareGetAccessPolicyHeaders,\n  ShareGetPermissionResponse,\n  ShareGetPropertiesResponse,\n  ShareSetAccessPolicyResponse,\n  ShareSetMetadataResponse,\n  ShareSetQuotaResponse,\n  SignedIdentifierModel,\n  ShareGetStatisticsResponseModel\n} from \"./generatedModels\";\nimport { Share } from \"./generated/src/operations\";\nimport { Metadata } from \"./models\";\nimport { newPipeline, StoragePipelineOptions, Pipeline } from \"./Pipeline\";\nimport { StorageClient, CommonOptions } from \"./StorageClient\";\nimport { URLConstants } from \"./utils/constants\";\nimport {\n  appendToURLPath,\n  setURLParameter,\n  truncatedISO8061Date,\n  extractConnectionStringParts,\n  getShareNameAndPathFromUrl\n} from \"./utils/utils.common\";\nimport {\n  ShareDirectoryClient,\n  DirectoryCreateOptions,\n  DirectoryDeleteOptions\n} from \"./ShareDirectoryClient\";\nimport { FileCreateOptions, FileDeleteOptions, ShareFileClient } from \"./ShareFileClient\";\nimport { Credential } from \"./credentials/Credential\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { createSpan } from \"./utils/tracing\";\n\n/**\n * Options to configure the {@link ShareClient.create} operation.\n *\n * @export\n * @interface ShareCreateOptions\n */\nexport interface ShareCreateOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ShareCreateOptions\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * A name-value pair to associate with a file storage object.\n   *\n   * @type {{ [propertyName: string]: string }}\n   * @memberof ShareCreateOptions\n   */\n  metadata?: { [propertyName: string]: string };\n\n  /**\n   * Specifies the maximum size of the share, in\n   * gigabytes.\n   *\n   * @type {number}\n   * @memberof ShareCreateOptions\n   */\n  quota?: number;\n}\n\n/**\n * Options to configure the {@link ShareClient.delete} operation.\n *\n * @export\n * @interface ShareDeleteMethodOptions\n */\nexport interface ShareDeleteMethodOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ShareDeleteMethodOptions\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Specifies the option\n   * include to delete the base share and all of its snapshots. Possible values\n   * include: 'include'\n   *\n   * @type {DeleteSnapshotsOptionType}\n   * @memberof ShareDeleteMethodOptions\n   */\n  deleteSnapshots?: DeleteSnapshotsOptionType;\n}\n\n/**\n * Options to configure the {@link ShareClient.setMetadata} operation.\n *\n * @export\n * @interface ShareSetMetadataOptions\n */\nexport interface ShareSetMetadataOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ShareSetMetadataOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure the {@link ShareClient.setAccessPolicy} operation.\n *\n * @export\n * @interface ShareSetAccessPolicyOptions\n */\nexport interface ShareSetAccessPolicyOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ShareSetAccessPolicyOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure the {@link ShareClient.getAccessPolicy} operation.\n *\n * @export\n * @interface ShareGetAccessPolicyOptions\n */\nexport interface ShareGetAccessPolicyOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ShareGetAccessPolicyOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure the {@link ShareClient.exists} operation.\n *\n * @export\n * @interface ShareExistsOptions\n */\nexport interface ShareExistsOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ShareExistsOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure the {@link ShareClient.getProperties} operation.\n *\n * @export\n * @interface ShareGetPropertiesOptions\n */\nexport interface ShareGetPropertiesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ShareGetPropertiesOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure the {@link ShareClient.setQuota} operation.\n *\n * @export\n * @interface ShareSetQuotaOptions\n */\nexport interface ShareSetQuotaOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ShareSetQuotaOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure the {@link ShareClient.getStatistics} operation.\n *\n * @export\n * @interface ShareGetStatisticsOptions\n */\nexport interface ShareGetStatisticsOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ShareGetStatisticsOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Signed Identifier\n *\n * @export\n * @interface SignedIdentifier\n */\nexport interface SignedIdentifier {\n  /**\n   * @member {string} id a unique id\n   */\n  id: string;\n  /**\n   * @member {AccessPolicy} accessPolicy\n   */\n  accessPolicy: {\n    /**\n     * @member {Date} startsOn the date-time the policy is active.\n     */\n    startsOn: Date;\n    /**\n     * @member {string} expiresOn the date-time the policy expires.\n     */\n    expiresOn: Date;\n    /**\n     * @member {string} permissions the permissions for the acl policy\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-share-acl\n     */\n    permissions: string;\n  };\n}\n\nexport declare type ShareGetAccessPolicyResponse = {\n  signedIdentifiers: SignedIdentifier[];\n} & ShareGetAccessPolicyHeaders & {\n    /**\n     * The underlying HTTP response.\n     */\n    _response: HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ShareGetAccessPolicyHeaders;\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: SignedIdentifierModel[];\n    };\n  };\n\n/**\n * Options to configure the {@link ShareClient.createSnapshot} operation.\n *\n * @export\n * @interface ShareCreateSnapshotOptions\n */\nexport interface ShareCreateSnapshotOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ShareCreateSnapshotOptions\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * A name-value pair to associate with a file storage object.\n   *\n   * @type {{ [propertyName: string]: string }}\n   * @memberof ShareCreateOptions\n   */\n  metadata?: { [propertyName: string]: string };\n}\n\n/**\n * Options to configure the {@link ShareClient.createPermission} operation.\n *\n * @export\n * @interface ShareCreatePermissionOptions\n */\nexport interface ShareCreatePermissionOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ShareCreatePermissionOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n/**\n * Options to configure the {@link ShareClient.getPermission} operation.\n *\n * @export\n * @interface ShareGetPermissionOptions\n */\nexport interface ShareGetPermissionOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ShareGetPermissionOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Response data for the {@link ShareClient.getStatistics} Operation.\n *\n * @export\n * @interface ShareGetStatisticsResponse\n */\nexport type ShareGetStatisticsResponse = ShareGetStatisticsResponseModel & {\n  /**\n   * @deprecated shareUsage is going to be deprecated. Please use ShareUsageBytes instead.\n   *\n   * The approximate size of the data stored on the share, rounded up to the nearest gigabyte. Note\n   * that this value may not include all recently created or recently resized files.\n   *\n   * @type {number}\n   * @memberof ShareGetStatisticsResponse\n   */\n  shareUsage: number;\n};\n\n/**\n * Contains response data for the {@link ShareClient.createIfNotExists} operation.\n *\n * @export\n * @interface ShareCreateIfNotExistsResponse\n */\nexport interface ShareCreateIfNotExistsResponse extends ShareCreateResponse {\n  /**\n   * Indicate whether the share is successfully created. Is false when the share is not changed as it already exists.\n   *\n   * @type {boolean}\n   * @memberof ShareCreateIfNotExistsResponse\n   */\n  succeeded: boolean;\n}\n\n/**\n * Contains response data for the {@link ShareClient.deleteIfExists} operation.\n *\n * @export\n * @interface ShareDeleteIfExistsResponse\n */\nexport interface ShareDeleteIfExistsResponse extends ShareDeleteResponse {\n  /**\n   * Indicate whether the share is successfully deleted. Is false if the share does not exist in the first place.\n   *\n   * @type {boolean}\n   * @memberof ShareDeleteIfExistsResponse\n   */\n  succeeded: boolean;\n}\n\n/**\n * A ShareClient represents a URL to the Azure Storage share allowing you to manipulate its directories and files.\n *\n * @export\n * @class ShareClient\n */\nexport class ShareClient extends StorageClient {\n  /**\n   * Share operation context provided by protocol layer.\n   *\n   * @private\n   * @type {Share}\n   * @memberof ShareClient\n   */\n  private context: Share;\n\n  private _name: string;\n\n  /**\n   * The name of the share\n   *\n   * @type {string}\n   * @memberof ShareClient\n   */\n  public get name(): string {\n    return this._name;\n  }\n\n  /**\n   * @param {string} connectionString Account connection string or a SAS connection string of an Azure storage account.\n   *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]\n   *                                  Account connection string example -\n   *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n   *                                  SAS connection string example -\n   *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n   * @param {string} name Share name.\n   * @param {StoragePipelineOptions} [options] Optional. Options to configure the HTTP pipeline.\n   * @memberof ShareClient\n   */\n  constructor(connectionString: string, name: string, options?: StoragePipelineOptions);\n  /**\n   * Creates an instance of ShareClient.\n   *\n   * @param {string} url A URL string pointing to Azure Storage file share, such as\n   *                     \"https://myaccount.file.core.windows.net/share\". You can\n   *                     append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.file.core.windows.net/share?sasString\".\n   * @param {Credential} [credential] Such as AnonymousCredential or StorageSharedKeyCredential.\n   *                                  If not specified, AnonymousCredential is used.\n   * @param {StoragePipelineOptions} [options] Optional. Options to configure the HTTP pipeline.\n   * @memberof ShareClient\n   */\n  constructor(url: string, credential?: Credential, options?: StoragePipelineOptions);\n  /**\n   * Creates an instance of ShareClient.\n   *\n   * @param {string} url A URL string pointing to Azure Storage file share, such as\n   *                     \"https://myaccount.file.core.windows.net/share\". You can\n   *                     append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.file.core.windows.net/share?sasString\".\n   * @param {Pipeline} pipeline Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   * @memberof ShareClient\n   */\n  constructor(url: string, pipeline: Pipeline);\n  constructor(\n    urlOrConnectionString: string,\n    credentialOrPipelineOrShareName?: Credential | Pipeline | string,\n    options?: StoragePipelineOptions\n  ) {\n    let pipeline: Pipeline;\n    let url: string;\n    if (credentialOrPipelineOrShareName instanceof Pipeline) {\n      // (url: string, pipeline: Pipeline)\n      url = urlOrConnectionString;\n      pipeline = credentialOrPipelineOrShareName;\n    } else if (credentialOrPipelineOrShareName instanceof Credential) {\n      // (url: string, credential?: Credential, options?: StoragePipelineOptions)\n      url = urlOrConnectionString;\n      pipeline = newPipeline(credentialOrPipelineOrShareName, options);\n    } else if (\n      !credentialOrPipelineOrShareName &&\n      typeof credentialOrPipelineOrShareName !== \"string\"\n    ) {\n      // (url: string, credential?: Credential, options?: StoragePipelineOptions)\n      // The second parameter is undefined. Use anonymous credential.\n      url = urlOrConnectionString;\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else if (\n      credentialOrPipelineOrShareName &&\n      typeof credentialOrPipelineOrShareName === \"string\"\n    ) {\n      // (connectionString: string, name: string, options?: StoragePipelineOptions)\n      const extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n      const name = credentialOrPipelineOrShareName;\n      if (extractedCreds.kind === \"AccountConnString\") {\n        if (isNode) {\n          const sharedKeyCredential = new StorageSharedKeyCredential(\n            extractedCreds.accountName!,\n            extractedCreds.accountKey\n          );\n          url = appendToURLPath(extractedCreds.url, name);\n          pipeline = newPipeline(sharedKeyCredential, options);\n        } else {\n          throw new Error(\"Account connection string is only supported in Node.js environment\");\n        }\n      } else if (extractedCreds.kind === \"SASConnString\") {\n        url = appendToURLPath(extractedCreds.url, name) + \"?\" + extractedCreds.accountSas;\n        pipeline = newPipeline(new AnonymousCredential(), options);\n      } else {\n        throw new Error(\n          \"Connection string must be either an Account connection string or a SAS connection string\"\n        );\n      }\n    } else {\n      throw new Error(\"Expecting non-empty strings for name parameter\");\n    }\n    super(url, pipeline);\n    this._name = getShareNameAndPathFromUrl(this.url).shareName;\n    this.context = new Share(this.storageClientContext);\n  }\n\n  /**\n   * Creates a new ShareClient object identical to the source but with the specified snapshot timestamp.\n   * Provide \"\" will remove the snapshot and return a URL to the base share.\n   *\n   * @param {string} snapshot The snapshot timestamp.\n   * @returns {ShareClient} A new ShareClient object identical to the source but with the specified snapshot timestamp\n   * @memberof ShareClient\n   */\n  public withSnapshot(snapshot: string): ShareClient {\n    return new ShareClient(\n      setURLParameter(\n        this.url,\n        URLConstants.Parameters.SHARE_SNAPSHOT,\n        snapshot.length === 0 ? undefined : snapshot\n      ),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Creates a new share under the specified account. If the share with\n   * the same name already exists, the operation fails.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-share\n   *\n   * @param {ShareCreateOptions} [options] Options to Share Create operation.\n   * @returns {Promise<ShareCreateResponse>} Response data for the Share Create operation.\n   * @memberof ShareClient\n   */\n  public async create(options: ShareCreateOptions = {}): Promise<ShareCreateResponse> {\n    const { span, spanOptions } = createSpan(\"ShareClient-create\", options.tracingOptions);\n    try {\n      return await this.context.create({\n        ...options,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new share under the specified account. If the share with\n   * the same name already exists, it is not changed.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-share\n   *\n   * @param {ShareCreateOptions} [options]\n   * @returns {Promise<ShareCreateIfNotExistsResponse>}\n   * @memberof ShareClient\n   */\n  public async createIfNotExists(\n    options: ShareCreateOptions = {}\n  ): Promise<ShareCreateIfNotExistsResponse> {\n    const { span, spanOptions } = createSpan(\n      \"ShareClient-createIfNotExists\",\n      options.tracingOptions\n    );\n    try {\n      const res = await this.create({\n        ...options,\n        tracingOptions: { ...options!.tracingOptions, spanOptions }\n      });\n      return {\n        succeeded: true,\n        ...res\n      };\n    } catch (e) {\n      if (e.details?.errorCode === \"ShareAlreadyExists\") {\n        span.setStatus({\n          code: CanonicalCode.ALREADY_EXISTS,\n          message: \"Expected exception when creating a share only if it doesn't already exist.\"\n        });\n        return {\n          succeeded: false,\n          ...e.response?.parsedHeaders,\n          _response: e.response\n        };\n      }\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a {@link ShareDirectoryClient} object.\n   *\n   * @param directoryName A directory name\n   * @returns {ShareDirectoryClient} The ShareDirectoryClient object for the given directory name.\n   * @memberof ShareClient\n   */\n  public getDirectoryClient(directoryName: string): ShareDirectoryClient {\n    return new ShareDirectoryClient(\n      appendToURLPath(this.url, encodeURIComponent(directoryName)),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Gets the directory client for the root directory of this share.\n   * Note that the root directory always exists and cannot be deleted.\n   *\n   * @readonly\n   * @type {ShareDirectoryClient} A new ShareDirectoryClient object for the root directory.\n   * @memberof ShareClient\n   */\n  public get rootDirectoryClient(): ShareDirectoryClient {\n    return this.getDirectoryClient(\"\");\n  }\n\n  /**\n   * Creates a new subdirectory under this share.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-directory\n   *\n   * @param {string} directoryName\n   * @param {DirectoryCreateOptions} [options] Options to Directory Create operation.\n   * @returns {Promise<{ directoryClient: ShareDirectoryClient, directoryCreateResponse: DirectoryCreateResponse }>} Directory creation response data and the corresponding directory client.\n   * @memberof ShareClient\n   */\n  public async createDirectory(\n    directoryName: string,\n    options: DirectoryCreateOptions = {}\n  ): Promise<{\n    directoryClient: ShareDirectoryClient;\n    directoryCreateResponse: DirectoryCreateResponse;\n  }> {\n    const { span, spanOptions } = createSpan(\"ShareClient-createDirectory\", options.tracingOptions);\n    try {\n      const directoryClient = this.getDirectoryClient(directoryName);\n      const directoryCreateResponse = await directoryClient.create({\n        ...options,\n        tracingOptions: { ...options.tracingOptions, spanOptions }\n      });\n      return {\n        directoryClient,\n        directoryCreateResponse\n      };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Removes the specified empty sub directory under this share.\n   * Note that the directory must be empty before it can be deleted.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-directory\n   *\n   * @param {string} directoryName\n   * @param {DirectoryDeleteOptions} [options] Options to Directory Delete operation.\n   * @returns {Promise<DirectoryDeleteResponse>} Directory deletion response data.\n   * @memberof ShareClient\n   */\n  public async deleteDirectory(\n    directoryName: string,\n    options: DirectoryDeleteOptions = {}\n  ): Promise<DirectoryDeleteResponse> {\n    const { span, spanOptions } = createSpan(\"ShareClient-deleteDirectory\", options.tracingOptions);\n    try {\n      const directoryClient = this.getDirectoryClient(directoryName);\n      return await directoryClient.delete({\n        ...options,\n        tracingOptions: { ...options.tracingOptions, spanOptions }\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new file or replaces a file under the root directory of this share.\n   * Note it only initializes the file with no content.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-file\n   *\n   * @param {string} fileName\n   * @param {number} size Specifies the maximum size in bytes for the file, up to 1 TB.\n   * @param {FileCreateOptions} [options] Options to File Create operation.\n   * @returns {Promise<{ fileClient: ShareFileClient, fileCreateResponse: FileCreateResponse }>} File creation response data and the corresponding file client.\n   * @memberof ShareClient\n   */\n  public async createFile(\n    fileName: string,\n    size: number,\n    options: FileCreateOptions = {}\n  ): Promise<{ fileClient: ShareFileClient; fileCreateResponse: FileCreateResponse }> {\n    const { span, spanOptions } = createSpan(\"ShareClient-createFile\", options.tracingOptions);\n    try {\n      const directoryClient = this.rootDirectoryClient;\n      const fileClient = directoryClient.getFileClient(fileName);\n      const fileCreateResponse = await fileClient.create(size, {\n        ...options,\n        tracingOptions: { ...options.tracingOptions, spanOptions }\n      });\n      return {\n        fileClient,\n        fileCreateResponse\n      };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Removes a file under the root directory of this share from the storage account.\n   * When a file is successfully deleted, it is immediately removed from the storage\n   * account's index and is no longer accessible to clients. The file's data is later\n   * removed from the service during garbage collection.\n   *\n   * Delete File will fail with status code 409 (Conflict) and error code `SharingViolation`\n   * if the file is open on an SMB client.\n   *\n   * Delete File is not supported on a share snapshot, which is a read-only copy of\n   * a share. An attempt to perform this operation on a share snapshot will fail with 400\n   * (`InvalidQueryParameterValue`)\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-file2\n   *\n   * @param {string} directoryName\n   * @param {string} fileName\n   * @param {FileDeleteOptions} [options] Options to File Delete operation.\n   * @returns Promise<FileDeleteResponse> File Delete response data.\n   * @memberof ShareClient\n   */\n  public async deleteFile(\n    fileName: string,\n    options: FileDeleteOptions = {}\n  ): Promise<FileDeleteResponse> {\n    const { span, spanOptions } = createSpan(\"ShareClient-deleteFile\", options.tracingOptions);\n    try {\n      const directoryClient = this.rootDirectoryClient;\n      const fileClient = directoryClient.getFileClient(fileName);\n      return await fileClient.delete({\n        ...options,\n        tracingOptions: { ...options.tracingOptions, spanOptions }\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns true if the Azrue share resource represented by this client exists; false otherwise.\n   *\n   * NOTE: use this function with care since an existing share might be deleted by other clients or\n   * applications. Vice versa new shares might be added by other clients or applications after this\n   * function completes.\n   *\n   * @param {ShareExistsOptions} [options] options to Exists operation.\n   * @returns {Promise<boolean>}\n   * @memberof ShareClient\n   */\n  public async exists(options: ShareExistsOptions = {}): Promise<boolean> {\n    const { span, spanOptions } = createSpan(\"ShareClient-exists\", options.tracingOptions);\n    try {\n      await this.getProperties({\n        abortSignal: options.abortSignal,\n        tracingOptions: { ...options.tracingOptions, spanOptions }\n      });\n      return true;\n    } catch (e) {\n      if (e.statusCode === 404) {\n        span.setStatus({\n          code: CanonicalCode.NOT_FOUND,\n          message: \"Expected exception when checking share existence\"\n        });\n        return false;\n      }\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns all user-defined metadata and system properties for the specified\n   * share.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-share-properties\n   *\n   * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if\n   * they originally contained uppercase characters. This differs from the metadata keys returned by\n   * the `listShares` method of {@link ShareServiceClient} using the `includeMetadata` option, which\n   * will retain their original casing.\n   *\n   * @returns {Promise<ShareGetPropertiesResponse>} Response data for the Share Get Properties operation.\n   * @memberof ShareClient\n   */\n  public async getProperties(\n    options: ShareGetPropertiesOptions = {}\n  ): Promise<ShareGetPropertiesResponse> {\n    const { span, spanOptions } = createSpan(\"ShareClient-getProperties\", options.tracingOptions);\n    try {\n      return await this.context.getProperties({\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Marks the specified share for deletion. The share and any directories or files\n   * contained within it are later deleted during garbage collection.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-share\n   *\n   * @param {ShareDeleteMethodOptions} [options] Options to Share Delete operation.\n   * @returns {Promise<ShareDeleteResponse>} Response data for the Share Delete operation.\n   * @memberof ShareClient\n   */\n  public async delete(options: ShareDeleteMethodOptions = {}): Promise<ShareDeleteResponse> {\n    const { span, spanOptions } = createSpan(\"ShareClient-delete\", options.tracingOptions);\n    try {\n      return await this.context.deleteMethod({\n        ...options,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Marks the specified share for deletion if it exists. The share and any directories or files\n   * contained within it are later deleted during garbage collection.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-share\n   *\n   * @param {ShareDeleteMethodOptions} [options]\n   * @returns {Promise<ShareDeleteIfExistsResponse>}\n   * @memberof ShareClient\n   */\n  public async deleteIfExists(\n    options: ShareDeleteMethodOptions = {}\n  ): Promise<ShareDeleteIfExistsResponse> {\n    const { span, spanOptions } = createSpan(\"ShareClient-deleteIfExists\", options.tracingOptions);\n    try {\n      const res = await this.delete({\n        ...options,\n        tracingOptions: { ...options!.tracingOptions, spanOptions }\n      });\n      return {\n        succeeded: true,\n        ...res\n      };\n    } catch (e) {\n      if (e.details?.errorCode === \"ShareNotFound\") {\n        span.setStatus({\n          code: CanonicalCode.NOT_FOUND,\n          message: \"Expected exception when deleting a share only if it exists.\"\n        });\n        return {\n          succeeded: false,\n          ...e.response?.parsedHeaders,\n          _response: e.response\n        };\n      }\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets one or more user-defined name-value pairs for the specified share.\n   *\n   * If no option provided, or no metadata defined in the option parameter, the share\n   * metadata will be removed.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-share-metadata\n   *\n   * @param {Metadata} [metadata] If no metadata provided, all existing directory metadata will be removed.\n   * @param {ShareSetMetadataOptions} [option] Options to Share Set Metadata operation.\n   * @returns {Promise<ShareSetMetadataResponse>} Response data for the Share Set Metadata operation.\n   * @memberof ShareClient\n   */\n  public async setMetadata(\n    metadata?: Metadata,\n    options: ShareSetMetadataOptions = {}\n  ): Promise<ShareSetMetadataResponse> {\n    const { span, spanOptions } = createSpan(\"ShareClient-setMetadata\", options.tracingOptions);\n    try {\n      return await this.context.setMetadata({\n        abortSignal: options.abortSignal,\n        metadata,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Gets the permissions for the specified share. The permissions indicate\n   * whether share data may be accessed publicly.\n   *\n   * WARNING: JavaScript Date will potential lost precision when parsing start and expiry string.\n   * For example, new Date(\"2018-12-31T03:44:23.8827891Z\").toISOString() will get \"2018-12-31T03:44:23.882Z\".\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-share-acl\n   *\n   * @param {ShareGetAccessPolicyOptions} [option] Options to Share Get Access Policy operation.\n   * @returns {Promise<ShareGetAccessPolicyResponse>} Response data for the Share Get Access Policy operation.\n   * @memberof ShareClient\n   */\n  public async getAccessPolicy(\n    options: ShareGetAccessPolicyOptions = {}\n  ): Promise<ShareGetAccessPolicyResponse> {\n    const { span, spanOptions } = createSpan(\"ShareClient-getAccessPolicy\", options.tracingOptions);\n    try {\n      const response = await this.context.getAccessPolicy({\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n\n      const res: ShareGetAccessPolicyResponse = {\n        _response: response._response,\n        date: response.date,\n        etag: response.etag,\n        lastModified: response.lastModified,\n        requestId: response.requestId,\n        signedIdentifiers: [],\n        version: response.version\n      };\n\n      for (const identifier of response) {\n        res.signedIdentifiers.push({\n          accessPolicy: {\n            expiresOn: new Date(identifier.accessPolicy!.expiresOn!),\n            permissions: identifier.accessPolicy!.permissions!,\n            startsOn: new Date(identifier.accessPolicy!.startsOn!)\n          },\n          id: identifier.id\n        });\n      }\n\n      return res;\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets the permissions for the specified share. The permissions indicate\n   * whether directories or files in a share may be accessed publicly.\n   *\n   * When you set permissions for a share, the existing permissions are replaced.\n   * If no shareAcl provided, the existing share ACL will be\n   * removed.\n   *\n   * When you establish a stored access policy on a share, it may take up to 30 seconds to take effect.\n   * During this interval, a shared access signature that is associated with the stored access policy will\n   * fail with status code 403 (Forbidden), until the access policy becomes active.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-share-acl\n   *\n   * @param {SignedIdentifier[]} [shareAcl] Array of signed identifiers, each having a unique Id and details of access policy.\n   * @param {ShareSetAccessPolicyOptions} [option] Options to Share Set Access Policy operation.\n   * @returns {Promise<ShareSetAccessPolicyResponse>} Response data for the Share Set Access Policy operation.\n   * @memberof ShareClient\n   */\n  public async setAccessPolicy(\n    shareAcl?: SignedIdentifier[],\n    options: ShareSetAccessPolicyOptions = {}\n  ): Promise<ShareSetAccessPolicyResponse> {\n    const { span, spanOptions } = createSpan(\"ShareClient-setAccessPolicy\", options.tracingOptions);\n    try {\n      const acl: SignedIdentifierModel[] = [];\n      for (const identifier of shareAcl || []) {\n        acl.push({\n          accessPolicy: {\n            expiresOn: truncatedISO8061Date(identifier.accessPolicy.expiresOn),\n            permissions: identifier.accessPolicy.permissions,\n            startsOn: truncatedISO8061Date(identifier.accessPolicy.startsOn)\n          },\n          id: identifier.id\n        });\n      }\n\n      return await this.context.setAccessPolicy({\n        abortSignal: options.abortSignal,\n        shareAcl: acl,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a read-only snapshot of a share.\n   *\n   * @param {ShareCreateSnapshotOptions} [options={}] Options to Share Create Snapshot operation.\n   * @returns {Promise<ShareCreateSnapshotResponse>} Response data for the Share Create Snapshot operation.\n   * @memberof ShareClient\n   */\n  public async createSnapshot(\n    options: ShareCreateSnapshotOptions = {}\n  ): Promise<ShareCreateSnapshotResponse> {\n    const { span, spanOptions } = createSpan(\"ShareClient-createSnapshot\", options.tracingOptions);\n    try {\n      return await this.context.createSnapshot({\n        abortSignal: options.abortSignal,\n        ...options,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets quota for the specified share.\n   *\n   * @param {number} quotaInGB Specifies the maximum size of the share in gigabytes\n   * @param {ShareSetQuotaOptions} [option] Options to Share Set Quota operation.\n   * @returns {Promise<ShareSetQuotaResponse>} Response data for the Share Get Quota operation.\n   * @memberof ShareClient\n   */\n  public async setQuota(\n    quotaInGB: number,\n    options: ShareSetQuotaOptions = {}\n  ): Promise<ShareSetQuotaResponse> {\n    const { span, spanOptions } = createSpan(\"ShareClient-setQuota\", options.tracingOptions);\n    try {\n      if (quotaInGB <= 0 || quotaInGB > 5120) {\n        throw new RangeError(\n          `Share quota must be greater than 0, and less than or equal to 5Tib (5120GB)`\n        );\n      }\n      return await this.context.setQuota({\n        abortSignal: options.abortSignal,\n        quota: quotaInGB,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves statistics related to the share.\n   *\n   * @param {ShareGetStatisticsOptions} [option] Options to Share Get Statistics operation.\n   * @returns {Promise<ShareGetStatisticsResponse>} Response data for the Share Get Statistics operation.\n   * @memberof ShareClient\n   */\n  public async getStatistics(\n    options: ShareGetStatisticsOptions = {}\n  ): Promise<ShareGetStatisticsResponse> {\n    const { span, spanOptions } = createSpan(\"ShareClient-getStatistics\", options.tracingOptions);\n    try {\n      const response = await this.context.getStatistics({\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n\n      const GBBytes = 1024 * 1024 * 1024;\n      return { ...response, shareUsage: Math.ceil(response.shareUsageBytes / GBBytes) };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a file permission (a security descriptor) at the share level.\n   * The created security descriptor can be used for the files/directories in the share.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-permission\n   *\n   * @param {ShareCreatePermissionOptions} [options] Options to Share Create Permission operation.\n   * @param filePermission File permission described in the SDDL\n   */\n  public async createPermission(\n    filePermission: string,\n    options: ShareCreatePermissionOptions = {}\n  ): Promise<ShareCreatePermissionResponse> {\n    const { span, spanOptions } = createSpan(\n      \"ShareClient-createPermission\",\n      options.tracingOptions\n    );\n    try {\n      return await this.context.createPermission(\n        {\n          permission: filePermission\n        },\n        {\n          abortSignal: options.abortSignal,\n          spanOptions\n        }\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Gets the Security Descriptor Definition Language (SDDL) for a given file permission key\n   * which indicates a security descriptor.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-permission\n   *\n   * @param {ShareGetPermissionOptions} [options] Options to Share Create Permission operation.\n   * @param filePermissionKey File permission key which indicates the security descriptor of the permission.\n   */\n  public async getPermission(\n    filePermissionKey: string,\n    options: ShareGetPermissionOptions = {}\n  ): Promise<ShareGetPermissionResponse> {\n    const { span, spanOptions } = createSpan(\"ShareClient-getPermission\", options.tracingOptions);\n    try {\n      return await this.context.getPermission(filePermissionKey, {\n        aborterSignal: options.abortSignal,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n"]}
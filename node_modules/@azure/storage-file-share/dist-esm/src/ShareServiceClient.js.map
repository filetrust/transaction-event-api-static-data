{"version":3,"file":"ShareServiceClient.js","sourceRoot":"","sources":["../../src/ShareServiceClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport {\n  FileServiceProperties,\n  ListSharesIncludeType,\n  ShareCreateResponse,\n  ShareDeleteResponse,\n  ServiceGetPropertiesResponse,\n  ServiceSetPropertiesResponse,\n  ServiceListSharesSegmentResponse,\n  ShareItem\n} from \"./generatedModels\";\nimport { Service } from \"./generated/src/operations\";\nimport { newPipeline, StoragePipelineOptions, Pipeline } from \"./Pipeline\";\nimport { StorageClient, CommonOptions } from \"./StorageClient\";\nimport { ShareClientInternal } from \"./ShareClientInternal\";\nimport { ShareClient, ShareCreateOptions, ShareDeleteMethodOptions } from \"./ShareClient\";\nimport { appendToURLPath, extractConnectionStringParts } from \"./utils/utils.common\";\nimport { Credential } from \"./credentials/Credential\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport \"@azure/core-paging\";\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { isNode } from \"@azure/core-http\";\nimport { CanonicalCode } from \"@opentelemetry/api\";\nimport { createSpan } from \"./utils/tracing\";\n\n/**\n * Options to configure Share - List Shares Segment operations.\n *\n * See:\n * - {@link ShareServiceClient.listSegments}\n * - {@link ShareServiceClient.listItems}\n * - {@link ShareServiceClient.listSharesSegment}\n *\n * @interface ServiceListSharesSegmentOptions\n */\ninterface ServiceListSharesSegmentOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ServiceListSharesSegmentOptions\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Filters the results to return only entries whose\n   * name begins with the specified prefix.\n   *\n   * @type {string}\n   * @memberof ServiceListSharesSegmentOptions\n   */\n  prefix?: string;\n  /**\n   * Specifies the maximum number of entries to\n   * return. If the request does not specify maxResults, or specifies a value\n   * greater than 5,000, the server will return up to 5,000 items.\n   *\n   * @type {number}\n   * @memberof ServiceListSharesSegmentOptions\n   */\n  maxResults?: number;\n\n  /**\n   * Include this parameter to\n   * specify one or more datasets to include in the response.\n   *\n   * @type {ListSharesIncludeType[]}\n   * @memberof ServiceListSharesSegmentOptions\n   */\n  include?: ListSharesIncludeType[];\n}\n\n/**\n * Options to configure the {@link ShareServiceClient.listShares} operation.\n *\n * @export\n * @interface ServiceListSharesOptions\n */\nexport interface ServiceListSharesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ServiceListSharesOptions\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Filters the results to return only entries whose\n   * name begins with the specified prefix.\n   *\n   * @type {string}\n   * @memberof ServiceListSharesOptions\n   */\n  prefix?: string;\n\n  /**\n   * Specifies that share snapshots should be included in the enumeration. Share Snapshots are listed from oldest to newest in the response.\n   *\n   * @type {boolean}\n   * @memberof ServiceListSharesOptions\n   */\n  includeMetadata?: boolean;\n\n  /**\n   * Specifies that share snapshot should be returned in the response.\n   *\n   * @type {boolean}\n   * @memberof ServiceListSharesOptions\n   */\n  includeSnapshots?: boolean;\n\n  /**\n   * Specifies that share soft deleted should be returned in the response.\n   *\n   * @type {boolean}\n   * @memberof ServiceListSharesOptions\n   */\n  includeDeleted?: boolean;\n}\n\n/**\n * Options to configure the {@link ShareServiceClient.getProperties} operation.\n *\n * @export\n * @interface ServiceGetPropertiesOptions\n */\nexport interface ServiceGetPropertiesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof AppendBlobCreateOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure the {@link ShareServiceClient.setProperties} operation.\n *\n * @export\n * @interface ServiceSetPropertiesOptions\n */\nexport interface ServiceSetPropertiesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof AppendBlobCreateOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure the {@link ShareServiceClient.undelete} operation.\n *\n * @export\n * @interface ServiceUndeleteShareOptions\n */\nexport interface ServiceUndeleteShareOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ServiceUndeleteShareOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n\n/**\n * A ShareServiceClient represents a URL to the Azure Storage File service allowing you\n * to manipulate file shares.\n *\n * @export\n * @class ShareServiceClient\n */\nexport class ShareServiceClient extends StorageClient {\n         /**\n          * serviceContext provided by protocol layer.\n          *\n          * @private\n          * @type {Service}\n          * @memberof ShareServiceClient\n          */\n         private serviceContext: Service;\n\n         /**\n          *\n          * Creates an instance of ShareServiceClient from connection string.\n          *\n          * @param {string} connectionString Account connection string or a SAS connection string of an Azure storage account.\n          *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]\n          *                                  Account connection string example -\n          *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n          *                                  SAS connection string example -\n          *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n          * @param {StoragePipelineOptions} [options] Options to configure the HTTP pipeline.\n          * @returns {ShareServiceClient} A new ShareServiceClient from the given connection string.\n          * @memberof ShareServiceClient\n          */\n         public static fromConnectionString(\n           connectionString: string,\n           options?: StoragePipelineOptions\n         ): ShareServiceClient {\n           const extractedCreds = extractConnectionStringParts(connectionString);\n           if (extractedCreds.kind === \"AccountConnString\") {\n             if (isNode) {\n               const sharedKeyCredential = new StorageSharedKeyCredential(\n                 extractedCreds.accountName!,\n                 extractedCreds.accountKey\n               );\n               const pipeline = newPipeline(sharedKeyCredential, options);\n               return new ShareServiceClient(extractedCreds.url, pipeline);\n             } else {\n               throw new Error(\n                 \"Account connection string is only supported in Node.js environment\"\n               );\n             }\n           } else if (extractedCreds.kind === \"SASConnString\") {\n             const pipeline = newPipeline(new AnonymousCredential(), options);\n             return new ShareServiceClient(\n               extractedCreds.url + \"?\" + extractedCreds.accountSas,\n               pipeline\n             );\n           } else {\n             throw new Error(\n               \"Connection string must be either an Account connection string or a SAS connection string\"\n             );\n           }\n         }\n\n         /**\n          * Creates an instance of ShareServiceClient.\n          *\n          * @param {string} url A URL string pointing to Azure Storage file service, such as\n          *                     \"https://myaccount.file.core.windows.net\". You can Append a SAS\n          *                     if using AnonymousCredential, such as \"https://myaccount.file.core.windows.net?sasString\".\n          * @param {Credential} [credential] Such as AnonymousCredential or StorageSharedKeyCredential.\n          *                                  If not specified, AnonymousCredential is used.\n          * @param {StoragePipelineOptions} [options] Optional. Options to configure the HTTP pipeline.\n          * @memberof ShareServiceClient\n          */\n         constructor(url: string, credential?: Credential, options?: StoragePipelineOptions);\n         /**\n          * Creates an instance of ShareServiceClient.\n          *\n          * @param {string} url A URL string pointing to Azure Storage file service, such as\n          *                     \"https://myaccount.file.core.windows.net\". You can Append a SAS\n          *                     if using AnonymousCredential, such as \"https://myaccount.file.core.windows.net?sasString\".\n          * @param {Pipeline} pipeline Call newPipeline() to create a default\n          *                            pipeline, or provide a customized pipeline.\n          * @memberof ShareServiceClient\n          */\n         constructor(url: string, pipeline: Pipeline);\n         constructor(\n           url: string,\n           credentialOrPipeline?: Credential | Pipeline,\n           options?: StoragePipelineOptions\n         ) {\n           let pipeline: Pipeline;\n           if (credentialOrPipeline instanceof Pipeline) {\n             pipeline = credentialOrPipeline;\n           } else if (credentialOrPipeline instanceof Credential) {\n             pipeline = newPipeline(credentialOrPipeline, options);\n           } else {\n             // The second parameter is undefined. Use anonymous credential.\n             pipeline = newPipeline(new AnonymousCredential(), options);\n           }\n\n           super(url, pipeline);\n           this.serviceContext = new Service(this.storageClientContext);\n         }\n\n         /**\n          * Creates a ShareClient object.\n          *\n          * @param shareName Name of a share.\n          * @returns {ShareClient} The ShareClient object for the given share name.\n          * @memberof ShareServiceClient\n          *\n          * Example usage:\n          *\n          * ```js\n          * const shareClient = serviceClient.getShareClient(\"<share name>\");\n          * await shareClient.create();\n          * console.log(\"Created share successfully!\");\n          * ```\n          */\n         public getShareClient(shareName: string): ShareClient {\n           return new ShareClient(appendToURLPath(this.url, shareName), this.pipeline);\n         }\n\n         /**\n          * Creates a Share.\n          *\n          * @param {string} shareName\n          * @param {ShareCreateOptions} [options]\n          * @returns {Promise<{ shareCreateResponse: ShareCreateResponse, shareClient: ShareClient }>} Share creation response and the corresponding share client.\n          * @memberof ShareServiceClient\n          */\n         public async createShare(\n           shareName: string,\n           options: ShareCreateOptions = {}\n         ): Promise<{ shareCreateResponse: ShareCreateResponse; shareClient: ShareClient }> {\n           const { span, spanOptions } = createSpan(\n             \"ShareServiceClient-createShare\",\n             options.tracingOptions\n           );\n           try {\n             const shareClient = this.getShareClient(shareName);\n             const shareCreateResponse = await shareClient.create({\n               ...options,\n               tracingOptions: { ...options!.tracingOptions, spanOptions }\n             });\n             return {\n               shareCreateResponse,\n               shareClient\n             };\n           } catch (e) {\n             span.setStatus({\n               code: CanonicalCode.UNKNOWN,\n               message: e.message\n             });\n             throw e;\n           } finally {\n             span.end();\n           }\n         }\n\n         /**\n          * Deletes a Share.\n          *\n          * @param {string} shareName\n          * @param {ShareDeleteMethodOptions} [options]\n          * @returns {Promise<ShareDeleteResponse>} Share deletion response and the corresponding share client.\n          * @memberof ShareServiceClient\n          */\n         public async deleteShare(\n           shareName: string,\n           options: ShareDeleteMethodOptions = {}\n         ): Promise<ShareDeleteResponse> {\n           const { span, spanOptions } = createSpan(\n             \"ShareServiceClient-deleteShare\",\n             options.tracingOptions\n           );\n           try {\n             const shareClient = this.getShareClient(shareName);\n             return await shareClient.delete({\n               ...options,\n               tracingOptions: { ...options!.tracingOptions, spanOptions }\n             });\n           } catch (e) {\n             span.setStatus({\n               code: CanonicalCode.UNKNOWN,\n               message: e.message\n             });\n             throw e;\n           } finally {\n             span.end();\n           }\n         }\n\n         /**\n          * Gets the properties of a storage account’s file service, including properties\n          * for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.\n          * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-file-service-properties}\n          *\n          * @param {ServiceGetPropertiesOptions} [options={}] Options to Get Properties operation.\n          * @returns {Promise<ServiceGetPropertiesResponse>} Response data for the Get Properties operation.\n          * @memberof ShareServiceClient\n          */\n         public async getProperties(\n           options: ServiceGetPropertiesOptions = {}\n         ): Promise<ServiceGetPropertiesResponse> {\n           const { span, spanOptions } = createSpan(\n             \"ShareServiceClient-getProperties\",\n             options.tracingOptions\n           );\n           try {\n             return await this.serviceContext.getProperties({\n               abortSignal: options.abortSignal,\n               spanOptions\n             });\n           } catch (e) {\n             span.setStatus({\n               code: CanonicalCode.UNKNOWN,\n               message: e.message\n             });\n             throw e;\n           } finally {\n             span.end();\n           }\n         }\n\n         /**\n          * Sets properties for a storage account’s file service endpoint, including properties\n          * for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft delete settings.\n          * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-service-properties}\n          *\n          * @param {FileServiceProperties} properties\n          * @param {ServiceSetPropertiesOptions} [options={}] Options to Set Properties operation.\n          * @returns {Promise<ServiceSetPropertiesResponse>} Response data for the Set Properties operation.\n          * @memberof ShareServiceClient\n          */\n         public async setProperties(\n           properties: FileServiceProperties,\n           options: ServiceSetPropertiesOptions = {}\n         ): Promise<ServiceSetPropertiesResponse> {\n           const { span, spanOptions } = createSpan(\n             \"ShareServiceClient-setProperties\",\n             options.tracingOptions\n           );\n           try {\n             return await this.serviceContext.setProperties(properties, {\n               abortSignal: options.abortSignal,\n               spanOptions\n             });\n           } catch (e) {\n             span.setStatus({\n               code: CanonicalCode.UNKNOWN,\n               message: e.message\n             });\n             throw e;\n           } finally {\n             span.end();\n           }\n         }\n\n         /**\n          * Returns an AsyncIterableIterator for {@link ServiceListSharesSegmentResponse} objects\n          *\n          * @private\n          * @param {string} [marker] A string value that identifies the portion of\n          *                          the list of shares to be returned with the next listing operation. The\n          *                          operation returns the ContinuationToken value within the response body if the\n          *                          listing operation did not return all shares remaining to be listed\n          *                          with the current page. The ContinuationToken value can be used as the value for\n          *                          the marker parameter in a subsequent call to request the next page of list\n          *                          items. The marker value is opaque to the client.\n          * @param {ServiceListSharesSegmentOptions} [options] Options to list shares operation.\n          * @returns {AsyncIterableIterator<ServiceListSharesSegmentResponse>}\n          * @memberof ShareServiceClient\n          */\n         private async *listSegments(\n           marker?: string,\n           options: ServiceListSharesSegmentOptions = {}\n         ): AsyncIterableIterator<ServiceListSharesSegmentResponse> {\n           if (options.prefix === \"\") {\n             options.prefix = undefined;\n           }\n\n           let listSharesSegmentResponse;\n           do {\n             listSharesSegmentResponse = await this.listSharesSegment(marker, options);\n             marker = listSharesSegmentResponse.continuationToken;\n             yield await listSharesSegmentResponse;\n           } while (marker);\n         }\n\n         /**\n          * Returns an AsyncIterableIterator for share items\n          *\n          * @private\n          * @param {ServiceListSharesSegmentOptions} [options] Options to list shares operation.\n          * @returns {AsyncIterableIterator<ServiceListSharesSegmentResponse>}\n          * @memberof ShareServiceClient\n          */\n         private async *listItems(\n           options: ServiceListSharesSegmentOptions = {}\n         ): AsyncIterableIterator<ShareItem> {\n           if (options.prefix === \"\") {\n             options.prefix = undefined;\n           }\n\n           let marker: string | undefined;\n           for await (const segment of this.listSegments(marker, options)) {\n             yield* segment.shareItems;\n           }\n         }\n\n         /**\n          * Returns an async iterable iterator to list all the shares\n          * under the specified account.\n          *\n          * .byPage() returns an async iterable iterator to list the shares in pages.\n          *\n          * Example using `for await` syntax:\n          *\n          * ```js\n          * let i = 1;\n          * for await (const share of serviceClient.listShares()) {\n          *   console.log(`Share ${i++}: ${share.name}`);\n          * }\n          * ```\n          *\n          * Example using `iter.next()`:\n          *\n          * ```js\n          * let i = 1;\n          * let iter = serviceClient.listShares();\n          * let shareItem = await iter.next();\n          * while (!shareItem.done) {\n          *   console.log(`Share ${i++}: ${shareItem.value.name}`);\n          *   shareItem = await iter.next();\n          * }\n          * ```\n          *\n          * Example using `byPage()`:\n          *\n          * ```js\n          * // passing optional maxPageSize in the page settings\n          * let i = 1;\n          * for await (const response of serviceClient.listShares().byPage({ maxPageSize: 20 })) {\n          *   if (response.shareItems) {\n          *    for (const share of response.shareItems) {\n          *        console.log(`Share ${i++}: ${share.name}`);\n          *     }\n          *   }\n          * }\n          * ```\n          *\n          * Example using paging with a marker:\n          *\n          * ```js\n          * let i = 1;\n          * let iterator = serviceClient.listShares().byPage({ maxPageSize: 2 });\n          * let response = (await iterator.next()).value;\n          *\n          * // Prints 2 share names\n          * if (response.shareItems) {\n          *   for (const share of response.shareItems) {\n          *     console.log(`Share ${i++}: ${share.name}`);\n          *   }\n          * }\n          *\n          * // Gets next marker\n          * let marker = response.continuationToken;\n          *\n          * // Passing next marker as continuationToken\n          * iterator = serviceClient.listShares().byPage({ continuationToken: marker, maxPageSize: 10 });\n          * response = (await iterator.next()).value;\n          *\n          * // Prints 10 share names\n          * if (response.shareItems) {\n          *   for (const share of response.shareItems) {\n          *     console.log(`Share ${i++}: ${share.name}`);\n          *   }\n          * }\n          * ```\n          *\n          * @param {ServiceListSharesOptions} [options] Options to list shares operation.\n          * @memberof ShareServiceClient\n          * @returns {PagedAsyncIterableIterator<ShareItem, ServiceListSharesSegmentResponse>}\n          * An asyncIterableIterator that supports paging.\n          */\n         public listShares(\n           options: ServiceListSharesOptions = {}\n         ): PagedAsyncIterableIterator<ShareItem, ServiceListSharesSegmentResponse> {\n           if (options.prefix === \"\") {\n             options.prefix = undefined;\n           }\n\n           const include: ListSharesIncludeType[] = [];\n           if (options.includeMetadata) {\n             include.push(\"metadata\");\n           }\n           if (options.includeSnapshots) {\n             include.push(\"snapshots\");\n           }\n           if (options.includeDeleted) {\n             include.push(\"deleted\");\n           }\n\n           const updatedOptions: ServiceListSharesSegmentOptions = {\n             ...options,\n             ...(include.length > 0 ? { include: include } : {})\n           };\n\n           // AsyncIterableIterator to iterate over queues\n           const iter = this.listItems(updatedOptions);\n           return {\n             /**\n              * @member {Promise} [next] The next method, part of the iteration protocol\n              */\n             next() {\n               return iter.next();\n             },\n             /**\n              * @member {Symbol} [asyncIterator] The connection to the async iterator, part of the iteration protocol\n              */\n             [Symbol.asyncIterator]() {\n               return this;\n             },\n             /**\n              * @member {Function} [byPage] Return an AsyncIterableIterator that works a page at a time\n              */\n             byPage: (settings: PageSettings = {}) => {\n               return this.listSegments(settings.continuationToken, {\n                 maxResults: settings.maxPageSize,\n                 ...updatedOptions\n               });\n             }\n           };\n         }\n\n         /**\n          * Gets the properties of a storage account's File service, including properties for Storage\n          * Analytics metrics and CORS (Cross-Origin Resource Sharing) rules.\n          *\n          * @param {string} [marker] A string value that identifies the portion of\n          *                          the list to be returned with the next list operation. The operation\n          *                          returns a marker value within the response body if the list returned was\n          *                          not complete. The marker value may then be used in a subsequent call to\n          *                          request the next set of list items. The marker value is opaque to the\n          *                          client.\n          * @param {ServiceListSharesSegmentOptions} [options={}] Options to List Shares Segment operation.\n          * @returns {Promise<ServiceListSharesSegmentResponse>} Response data for the List Shares Segment operation.\n          * @memberof ShareServiceClient\n          */\n         private async listSharesSegment(\n           marker?: string,\n           options: ServiceListSharesSegmentOptions = {}\n         ): Promise<ServiceListSharesSegmentResponse> {\n           const { span, spanOptions } = createSpan(\n             \"ShareServiceClient-listSharesSegment\",\n             options.tracingOptions\n           );\n\n           if (options.prefix === \"\") {\n             options.prefix = undefined;\n           }\n\n           try {\n             return await this.serviceContext.listSharesSegment({\n               marker,\n               ...options,\n               spanOptions\n             });\n           } catch (e) {\n             span.setStatus({\n               code: CanonicalCode.UNKNOWN,\n               message: e.message\n             });\n             throw e;\n           } finally {\n             span.end();\n           }\n         }\n\n         /**\n          * Restores a previously deleted share.\n          * This API is only functional if Share Soft Delete is enabled\n          * for the storage account associated with the share.\n          *\n          * @param deletedShareName The name of the previously deleted share.\n          * @param deletedShareVersion The version of the previously deleted share.\n          * @param {ShareUndeleteOptions} [options] Options to Share undelete operation.\n          * @returns {Promise<ShareClient>} Restored share.\n          * @memberof ShareServiceClient\n          */\n         public async undeleteShare(\n           deletedShareName: string,\n           deletedShareVersion: string,\n           options: ServiceUndeleteShareOptions = {}\n         ): Promise<ShareClient> {\n           const { span, spanOptions } = createSpan(\n             \"ShareServiceClient-undeleteShare\",\n             options.tracingOptions\n           );\n           try {\n             const shareClient = this.getShareClient(deletedShareName);\n             await new ShareClientInternal(shareClient.url, this.pipeline).restore({\n               deletedShareName: deletedShareName,\n               deletedShareVersion: deletedShareVersion,\n               aborterSignal: options.abortSignal,\n               spanOptions\n             });\n             return shareClient;\n           } catch (e) {\n             span.setStatus({\n               code: CanonicalCode.UNKNOWN,\n               message: e.message\n             });\n             throw e;\n           } finally {\n             span.end();\n           }\n         }\n       }\n"]}
{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/generated/src/models/index.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n\nimport * as coreHttp from \"@azure/core-http\";\n\n/**\n * An Access policy.\n */\nexport interface AccessPolicy {\n  /**\n   * The date-time the policy is active.\n   * **NOTE: This entity will be treated as a string instead of a Date because the API can\n   * potentially deal with a higher precision value than what is supported by JavaScript.**\n   */\n  startsOn?: string;\n  /**\n   * The date-time the policy expires.\n   * **NOTE: This entity will be treated as a string instead of a Date because the API can\n   * potentially deal with a higher precision value than what is supported by JavaScript.**\n   */\n  expiresOn?: string;\n  /**\n   * The permissions for the ACL policy.\n   */\n  permissions?: string;\n}\n\n/**\n * CORS is an HTTP feature that enables a web application running under one domain to access\n * resources in another domain. Web browsers implement a security restriction known as same-origin\n * policy that prevents a web page from calling APIs in a different domain; CORS provides a secure\n * way to allow one domain (the origin domain) to call APIs in another domain.\n */\nexport interface CorsRule {\n  /**\n   * The origin domains that are permitted to make a request against the storage service via CORS.\n   * The origin domain is the domain from which the request originates. Note that the origin must\n   * be an exact case-sensitive match with the origin that the user age sends to the service. You\n   * can also use the wildcard character '*' to allow all origin domains to make requests via CORS.\n   */\n  allowedOrigins: string;\n  /**\n   * The methods (HTTP request verbs) that the origin domain may use for a CORS request. (comma\n   * separated)\n   */\n  allowedMethods: string;\n  /**\n   * The request headers that the origin domain may specify on the CORS request.\n   */\n  allowedHeaders: string;\n  /**\n   * The response headers that may be sent in the response to the CORS request and exposed by the\n   * browser to the request issuer.\n   */\n  exposedHeaders: string;\n  /**\n   * The maximum amount time that a browser should cache the preflight OPTIONS request.\n   */\n  maxAgeInSeconds: number;\n}\n\n/**\n * A listed directory item.\n */\nexport interface DirectoryItem {\n  name: string;\n}\n\n/**\n * File properties.\n */\nexport interface FileProperty {\n  /**\n   * Content length of the file. This value may not be up-to-date since an SMB client may have\n   * modified the file locally. The value of Content-Length may not reflect that fact until the\n   * handle is closed or the op-lock is broken. To retrieve current property values, call Get File\n   * Properties.\n   */\n  contentLength: number;\n}\n\n/**\n * A listed file item.\n */\nexport interface FileItem {\n  name: string;\n  properties: FileProperty;\n}\n\n/**\n * Abstract for entries that can be listed from Directory.\n */\nexport interface FilesAndDirectoriesListSegment {\n  directoryItems: DirectoryItem[];\n  fileItems: FileItem[];\n}\n\n/**\n * A listed Azure Storage handle item.\n */\nexport interface HandleItem {\n  /**\n   * XSMB service handle ID\n   */\n  handleId: string;\n  /**\n   * File or directory name including full path starting from share root\n   */\n  path: string;\n  /**\n   * FileId uniquely identifies the file or directory.\n   */\n  fileId: string;\n  /**\n   * ParentId uniquely identifies the parent directory of the object.\n   */\n  parentId?: string;\n  /**\n   * SMB session ID in context of which the file handle was opened\n   */\n  sessionId: string;\n  /**\n   * Client IP that opened the handle\n   */\n  clientIp: string;\n  /**\n   * Time when the session that previously opened the handle has last been reconnected. (UTC)\n   */\n  openTime: Date;\n  /**\n   * Time handle was last connected to (UTC)\n   */\n  lastReconnectTime?: Date;\n}\n\n/**\n * An enumeration of directories and files.\n */\nexport interface ListFilesAndDirectoriesSegmentResponse {\n  serviceEndpoint: string;\n  shareName: string;\n  shareSnapshot?: string;\n  directoryPath: string;\n  prefix: string;\n  marker?: string;\n  maxResults?: number;\n  segment: FilesAndDirectoriesListSegment;\n  continuationToken: string;\n}\n\n/**\n * An enumeration of handles.\n */\nexport interface ListHandlesResponse {\n  handleList?: HandleItem[];\n  continuationToken: string;\n}\n\n/**\n * Properties of a share.\n */\nexport interface ShareProperties {\n  lastModified: Date;\n  etag: string;\n  quota: number;\n  provisionedIops?: number;\n  provisionedIngressMBps?: number;\n  provisionedEgressMBps?: number;\n  nextAllowedQuotaDowngradeTime?: Date;\n  deletedTime?: Date;\n  remainingRetentionDays?: number;\n}\n\n/**\n * A listed Azure Storage share item.\n */\nexport interface ShareItem {\n  name: string;\n  snapshot?: string;\n  deleted?: boolean;\n  version?: string;\n  properties: ShareProperties;\n  metadata?: { [propertyName: string]: string };\n}\n\n/**\n * An enumeration of shares.\n */\nexport interface ListSharesResponse {\n  serviceEndpoint: string;\n  prefix?: string;\n  marker?: string;\n  maxResults?: number;\n  shareItems?: ShareItem[];\n  continuationToken: string;\n}\n\n/**\n * The retention policy.\n */\nexport interface RetentionPolicy {\n  /**\n   * Indicates whether a retention policy is enabled for the File service. If false, metrics data\n   * is retained, and the user is responsible for deleting it.\n   */\n  enabled: boolean;\n  /**\n   * Indicates the number of days that metrics data should be retained. All data older than this\n   * value will be deleted. Metrics data is deleted on a best-effort basis after the retention\n   * period expires.\n   */\n  days?: number;\n}\n\n/**\n * Storage Analytics metrics for file service.\n */\nexport interface Metrics {\n  /**\n   * The version of Storage Analytics to configure.\n   */\n  version: string;\n  /**\n   * Indicates whether metrics are enabled for the File service.\n   */\n  enabled: boolean;\n  /**\n   * Indicates whether metrics should generate summary statistics for called API operations.\n   */\n  includeAPIs?: boolean;\n  retentionPolicy?: RetentionPolicy;\n}\n\n/**\n * An Azure Storage file range.\n */\nexport interface Range {\n  /**\n   * Start of the range.\n   */\n  start: number;\n  /**\n   * End of the range.\n   */\n  end: number;\n}\n\n/**\n * An interface representing StorageError.\n */\nexport interface StorageError {\n  message?: string;\n}\n\n/**\n * Stats for the share.\n */\nexport interface ShareStats {\n  /**\n   * The approximate size of the data stored in bytes. Note that this value may not include all\n   * recently created or recently resized files.\n   */\n  shareUsageBytes: number;\n}\n\n/**\n * Signed identifier.\n */\nexport interface SignedIdentifier {\n  /**\n   * A unique id.\n   */\n  id: string;\n  /**\n   * The access policy.\n   */\n  accessPolicy?: AccessPolicy;\n}\n\n/**\n * A permission (a security descriptor) at the share level.\n */\nexport interface SharePermission {\n  /**\n   * The permission in the Security Descriptor Definition Language (SDDL).\n   */\n  permission: string;\n}\n\n/**\n * Storage service properties.\n */\nexport interface FileServiceProperties {\n  /**\n   * A summary of request statistics grouped by API in hourly aggregates for files.\n   */\n  hourMetrics?: Metrics;\n  /**\n   * A summary of request statistics grouped by API in minute aggregates for files.\n   */\n  minuteMetrics?: Metrics;\n  /**\n   * The set of CORS rules.\n   */\n  cors?: CorsRule[];\n}\n\n/**\n * Additional parameters for a set of operations, such as: File_create, File_setHTTPHeaders.\n */\nexport interface FileHttpHeaders {\n  /**\n   * Sets the MIME content type of the file. The default type is 'application/octet-stream'.\n   */\n  fileContentType?: string;\n  /**\n   * Specifies which content encodings have been applied to the file.\n   */\n  fileContentEncoding?: string;\n  /**\n   * Specifies the natural languages used by this resource.\n   */\n  fileContentLanguage?: string;\n  /**\n   * Sets the file's cache control. The File service stores this value but does not use or modify\n   * it.\n   */\n  fileCacheControl?: string;\n  /**\n   * Sets the file's MD5 hash.\n   */\n  fileContentMD5?: Uint8Array;\n  /**\n   * Sets the file's Content-Disposition header.\n   */\n  fileContentDisposition?: string;\n}\n\n/**\n * Additional parameters for a set of operations.\n */\nexport interface LeaseAccessConditions {\n  /**\n   * If specified, the operation only succeeds if the resource's lease is active and matches this\n   * ID.\n   */\n  leaseId?: string;\n}\n\n/**\n * Additional parameters for uploadRangeFromURL operation.\n */\nexport interface SourceModifiedAccessConditions {\n  /**\n   * Specify the crc64 value to operate only on range with a matching crc64 checksum.\n   */\n  sourceIfMatchCrc64?: Uint8Array;\n  /**\n   * Specify the crc64 value to operate only on range without a matching crc64 checksum.\n   */\n  sourceIfNoneMatchCrc64?: Uint8Array;\n}\n\n/**\n * Additional parameters for startCopy operation.\n */\nexport interface CopyFileSmbInfo {\n  /**\n   * Specifies the option to copy file security descriptor from source file or to set it using the\n   * value which is defined by the header value of x-ms-file-permission or\n   * x-ms-file-permission-key. Possible values include: 'source', 'override'\n   */\n  filePermissionCopyMode?: PermissionCopyModeType;\n  /**\n   * Specifies the option to overwrite the target file if it already exists and has read-only\n   * attribute set.\n   */\n  ignoreReadOnly?: boolean;\n  /**\n   * Specifies either the option to copy file attributes from a source file(source) to a target\n   * file or a list of attributes to set on a target file.\n   */\n  fileAttributes?: string;\n  /**\n   * Specifies either the option to copy file creation time from a source file(source) to a target\n   * file or a time value in ISO 8601 format to set as creation time on a target file.\n   */\n  fileCreationTime?: string;\n  /**\n   * Specifies either the option to copy file last write time from a source file(source) to a\n   * target file or a time value in ISO 8601 format to set as last write time on a target file.\n   */\n  fileLastWriteTime?: string;\n  /**\n   * Specifies the option to set archive attribute on a target file. True means archive attribute\n   * will be set on a target file despite attribute overrides or a source file state.\n   */\n  setArchiveAttribute?: boolean;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ServiceSetPropertiesOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ServiceGetPropertiesOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ServiceListSharesSegmentOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * Filters the results to return only entries whose name begins with the specified prefix.\n   */\n  prefix?: string;\n  /**\n   * A string value that identifies the portion of the list to be returned with the next list\n   * operation. The operation returns a marker value within the response body if the list returned\n   * was not complete. The marker value may then be used in a subsequent call to request the next\n   * set of list items. The marker value is opaque to the client.\n   */\n  marker?: string;\n  /**\n   * Specifies the maximum number of entries to return. If the request does not specify maxresults,\n   * or specifies a value greater than 5,000, the server will return up to 5,000 items.\n   */\n  maxResults?: number;\n  /**\n   * Include this parameter to specify one or more datasets to include in the response.\n   */\n  include?: ListSharesIncludeType[];\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ShareCreateOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n  /**\n   * A name-value pair to associate with a file storage object.\n   */\n  metadata?: { [propertyName: string]: string };\n  /**\n   * Specifies the maximum size of the share, in gigabytes.\n   */\n  quota?: number;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ShareGetPropertiesOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The snapshot parameter is an opaque DateTime value that, when present, specifies the share\n   * snapshot to query.\n   */\n  shareSnapshot?: string;\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ShareDeleteMethodOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The snapshot parameter is an opaque DateTime value that, when present, specifies the share\n   * snapshot to query.\n   */\n  shareSnapshot?: string;\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n  /**\n   * Specifies the option include to delete the base share and all of its snapshots. Possible\n   * values include: 'include'\n   */\n  deleteSnapshots?: DeleteSnapshotsOptionType;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ShareCreateSnapshotOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n  /**\n   * A name-value pair to associate with a file storage object.\n   */\n  metadata?: { [propertyName: string]: string };\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ShareCreatePermissionOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ShareGetPermissionOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ShareSetQuotaOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n  /**\n   * Specifies the maximum size of the share, in gigabytes.\n   */\n  quota?: number;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ShareSetMetadataOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n  /**\n   * A name-value pair to associate with a file storage object.\n   */\n  metadata?: { [propertyName: string]: string };\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ShareGetAccessPolicyOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ShareSetAccessPolicyOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The ACL for the share.\n   */\n  shareAcl?: SignedIdentifier[];\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ShareGetStatisticsOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface ShareRestoreOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n  /**\n   * Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the\n   * analytics logs when storage analytics logging is enabled.\n   */\n  requestId?: string;\n  /**\n   * Specifies the name of the preivously-deleted share.\n   */\n  deletedShareName?: string;\n  /**\n   * Specifies the version of the preivously-deleted share.\n   */\n  deletedShareVersion?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface DirectoryCreateOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n  /**\n   * A name-value pair to associate with a file storage object.\n   */\n  metadata?: { [propertyName: string]: string };\n  /**\n   * If specified the permission (security descriptor) shall be set for the directory/file. This\n   * header can be used if Permission size is <= 8KB, else x-ms-file-permission-key header shall be\n   * used. Default value: Inherit. If SDDL is specified as input, it must have owner, group and\n   * dacl. Note: Only one of the x-ms-file-permission or x-ms-file-permission-key should be\n   * specified.\n   */\n  filePermission?: string;\n  /**\n   * Key of the permission to be set for the directory/file. Note: Only one of the\n   * x-ms-file-permission or x-ms-file-permission-key should be specified.\n   */\n  filePermissionKey?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface DirectoryGetPropertiesOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The snapshot parameter is an opaque DateTime value that, when present, specifies the share\n   * snapshot to query.\n   */\n  shareSnapshot?: string;\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface DirectoryDeleteMethodOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface DirectorySetPropertiesOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n  /**\n   * If specified the permission (security descriptor) shall be set for the directory/file. This\n   * header can be used if Permission size is <= 8KB, else x-ms-file-permission-key header shall be\n   * used. Default value: Inherit. If SDDL is specified as input, it must have owner, group and\n   * dacl. Note: Only one of the x-ms-file-permission or x-ms-file-permission-key should be\n   * specified.\n   */\n  filePermission?: string;\n  /**\n   * Key of the permission to be set for the directory/file. Note: Only one of the\n   * x-ms-file-permission or x-ms-file-permission-key should be specified.\n   */\n  filePermissionKey?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface DirectorySetMetadataOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n  /**\n   * A name-value pair to associate with a file storage object.\n   */\n  metadata?: { [propertyName: string]: string };\n}\n\n/**\n * Optional Parameters.\n */\nexport interface DirectoryListFilesAndDirectoriesSegmentOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * Filters the results to return only entries whose name begins with the specified prefix.\n   */\n  prefix?: string;\n  /**\n   * The snapshot parameter is an opaque DateTime value that, when present, specifies the share\n   * snapshot to query.\n   */\n  shareSnapshot?: string;\n  /**\n   * A string value that identifies the portion of the list to be returned with the next list\n   * operation. The operation returns a marker value within the response body if the list returned\n   * was not complete. The marker value may then be used in a subsequent call to request the next\n   * set of list items. The marker value is opaque to the client.\n   */\n  marker?: string;\n  /**\n   * Specifies the maximum number of entries to return. If the request does not specify maxresults,\n   * or specifies a value greater than 5,000, the server will return up to 5,000 items.\n   */\n  maxResults?: number;\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface DirectoryListHandlesOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * A string value that identifies the portion of the list to be returned with the next list\n   * operation. The operation returns a marker value within the response body if the list returned\n   * was not complete. The marker value may then be used in a subsequent call to request the next\n   * set of list items. The marker value is opaque to the client.\n   */\n  marker?: string;\n  /**\n   * Specifies the maximum number of entries to return. If the request does not specify maxresults,\n   * or specifies a value greater than 5,000, the server will return up to 5,000 items.\n   */\n  maxResults?: number;\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n  /**\n   * The snapshot parameter is an opaque DateTime value that, when present, specifies the share\n   * snapshot to query.\n   */\n  shareSnapshot?: string;\n  /**\n   * Specifies operation should apply to the directory specified in the URI, its files, its\n   * subdirectories and their files.\n   */\n  recursive?: boolean;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface DirectoryForceCloseHandlesOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n  /**\n   * A string value that identifies the portion of the list to be returned with the next list\n   * operation. The operation returns a marker value within the response body if the list returned\n   * was not complete. The marker value may then be used in a subsequent call to request the next\n   * set of list items. The marker value is opaque to the client.\n   */\n  marker?: string;\n  /**\n   * The snapshot parameter is an opaque DateTime value that, when present, specifies the share\n   * snapshot to query.\n   */\n  shareSnapshot?: string;\n  /**\n   * Specifies operation should apply to the directory specified in the URI, its files, its\n   * subdirectories and their files.\n   */\n  recursive?: boolean;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface FileCreateOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n  /**\n   * A name-value pair to associate with a file storage object.\n   */\n  metadata?: { [propertyName: string]: string };\n  /**\n   * If specified the permission (security descriptor) shall be set for the directory/file. This\n   * header can be used if Permission size is <= 8KB, else x-ms-file-permission-key header shall be\n   * used. Default value: Inherit. If SDDL is specified as input, it must have owner, group and\n   * dacl. Note: Only one of the x-ms-file-permission or x-ms-file-permission-key should be\n   * specified.\n   */\n  filePermission?: string;\n  /**\n   * Key of the permission to be set for the directory/file. Note: Only one of the\n   * x-ms-file-permission or x-ms-file-permission-key should be specified.\n   */\n  filePermissionKey?: string;\n  /**\n   * Additional parameters for the operation\n   */\n  fileHttpHeaders?: FileHttpHeaders;\n  /**\n   * Additional parameters for the operation\n   */\n  leaseAccessConditions?: LeaseAccessConditions;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface FileDownloadOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n  /**\n   * Return file data only from the specified byte range.\n   */\n  range?: string;\n  /**\n   * When this header is set to true and specified together with the Range header, the service\n   * returns the MD5 hash for the range, as long as the range is less than or equal to 4 MB in\n   * size.\n   */\n  rangeGetContentMD5?: boolean;\n  /**\n   * Additional parameters for the operation\n   */\n  leaseAccessConditions?: LeaseAccessConditions;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface FileGetPropertiesOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The snapshot parameter is an opaque DateTime value that, when present, specifies the share\n   * snapshot to query.\n   */\n  shareSnapshot?: string;\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n  /**\n   * Additional parameters for the operation\n   */\n  leaseAccessConditions?: LeaseAccessConditions;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface FileDeleteMethodOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n  /**\n   * Additional parameters for the operation\n   */\n  leaseAccessConditions?: LeaseAccessConditions;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface FileSetHTTPHeadersOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n  /**\n   * Resizes a file to the specified size. If the specified byte value is less than the current\n   * size of the file, then all ranges above the specified byte value are cleared.\n   */\n  fileContentLength?: number;\n  /**\n   * If specified the permission (security descriptor) shall be set for the directory/file. This\n   * header can be used if Permission size is <= 8KB, else x-ms-file-permission-key header shall be\n   * used. Default value: Inherit. If SDDL is specified as input, it must have owner, group and\n   * dacl. Note: Only one of the x-ms-file-permission or x-ms-file-permission-key should be\n   * specified.\n   */\n  filePermission?: string;\n  /**\n   * Key of the permission to be set for the directory/file. Note: Only one of the\n   * x-ms-file-permission or x-ms-file-permission-key should be specified.\n   */\n  filePermissionKey?: string;\n  /**\n   * Additional parameters for the operation\n   */\n  fileHttpHeaders?: FileHttpHeaders;\n  /**\n   * Additional parameters for the operation\n   */\n  leaseAccessConditions?: LeaseAccessConditions;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface FileSetMetadataOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n  /**\n   * A name-value pair to associate with a file storage object.\n   */\n  metadata?: { [propertyName: string]: string };\n  /**\n   * Additional parameters for the operation\n   */\n  leaseAccessConditions?: LeaseAccessConditions;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface FileAcquireLeaseOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n  /**\n   * Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never\n   * expires. A non-infinite lease can be between 15 and 60 seconds. A lease duration cannot be\n   * changed using renew or change.\n   */\n  duration?: number;\n  /**\n   * Proposed lease ID, in a GUID string format. The File service returns 400 (Invalid request) if\n   * the proposed lease ID is not in the correct format. See Guid Constructor (String) for a list\n   * of valid GUID string formats.\n   */\n  proposedLeaseId?: string;\n  /**\n   * Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the\n   * analytics logs when storage analytics logging is enabled.\n   */\n  requestId?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface FileReleaseLeaseOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n  /**\n   * Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the\n   * analytics logs when storage analytics logging is enabled.\n   */\n  requestId?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface FileChangeLeaseOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n  /**\n   * Proposed lease ID, in a GUID string format. The File service returns 400 (Invalid request) if\n   * the proposed lease ID is not in the correct format. See Guid Constructor (String) for a list\n   * of valid GUID string formats.\n   */\n  proposedLeaseId?: string;\n  /**\n   * Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the\n   * analytics logs when storage analytics logging is enabled.\n   */\n  requestId?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface FileBreakLeaseOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n  /**\n   * Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the\n   * analytics logs when storage analytics logging is enabled.\n   */\n  requestId?: string;\n  /**\n   * Additional parameters for the operation\n   */\n  leaseAccessConditions?: LeaseAccessConditions;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface FileUploadRangeOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * Initial data.\n   */\n  body?: coreHttp.HttpRequestBody;\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n  /**\n   * An MD5 hash of the content. This hash is used to verify the integrity of the data during\n   * transport. When the Content-MD5 header is specified, the File service compares the hash of the\n   * content that has arrived with the header value that was sent. If the two hashes do not match,\n   * the operation will fail with error code 400 (Bad Request).\n   */\n  contentMD5?: Uint8Array;\n  /**\n   * Additional parameters for the operation\n   */\n  leaseAccessConditions?: LeaseAccessConditions;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface FileUploadRangeFromURLOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n  /**\n   * Bytes of source data in the specified range.\n   */\n  sourceRange?: string;\n  /**\n   * Specify the crc64 calculated for the range of bytes that must be read from the copy source.\n   */\n  sourceContentCrc64?: Uint8Array;\n  /**\n   * Additional parameters for the operation\n   */\n  sourceModifiedAccessConditions?: SourceModifiedAccessConditions;\n  /**\n   * Additional parameters for the operation\n   */\n  leaseAccessConditions?: LeaseAccessConditions;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface FileGetRangeListOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The snapshot parameter is an opaque DateTime value that, when present, specifies the share\n   * snapshot to query.\n   */\n  shareSnapshot?: string;\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n  /**\n   * Specifies the range of bytes over which to list ranges, inclusively.\n   */\n  range?: string;\n  /**\n   * Additional parameters for the operation\n   */\n  leaseAccessConditions?: LeaseAccessConditions;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface FileStartCopyOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n  /**\n   * A name-value pair to associate with a file storage object.\n   */\n  metadata?: { [propertyName: string]: string };\n  /**\n   * If specified the permission (security descriptor) shall be set for the directory/file. This\n   * header can be used if Permission size is <= 8KB, else x-ms-file-permission-key header shall be\n   * used. Default value: Inherit. If SDDL is specified as input, it must have owner, group and\n   * dacl. Note: Only one of the x-ms-file-permission or x-ms-file-permission-key should be\n   * specified.\n   */\n  filePermission?: string;\n  /**\n   * Key of the permission to be set for the directory/file. Note: Only one of the\n   * x-ms-file-permission or x-ms-file-permission-key should be specified.\n   */\n  filePermissionKey?: string;\n  /**\n   * Additional parameters for the operation\n   */\n  copyFileSmbInfo?: CopyFileSmbInfo;\n  /**\n   * Additional parameters for the operation\n   */\n  leaseAccessConditions?: LeaseAccessConditions;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface FileAbortCopyOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n  /**\n   * Additional parameters for the operation\n   */\n  leaseAccessConditions?: LeaseAccessConditions;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface FileListHandlesOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * A string value that identifies the portion of the list to be returned with the next list\n   * operation. The operation returns a marker value within the response body if the list returned\n   * was not complete. The marker value may then be used in a subsequent call to request the next\n   * set of list items. The marker value is opaque to the client.\n   */\n  marker?: string;\n  /**\n   * Specifies the maximum number of entries to return. If the request does not specify maxresults,\n   * or specifies a value greater than 5,000, the server will return up to 5,000 items.\n   */\n  maxResults?: number;\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n  /**\n   * The snapshot parameter is an opaque DateTime value that, when present, specifies the share\n   * snapshot to query.\n   */\n  shareSnapshot?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface FileForceCloseHandlesOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n  /**\n   * A string value that identifies the portion of the list to be returned with the next list\n   * operation. The operation returns a marker value within the response body if the list returned\n   * was not complete. The marker value may then be used in a subsequent call to request the next\n   * set of list items. The marker value is opaque to the client.\n   */\n  marker?: string;\n  /**\n   * The snapshot parameter is an opaque DateTime value that, when present, specifies the share\n   * snapshot to query.\n   */\n  shareSnapshot?: string;\n}\n\n/**\n * Defines headers for SetProperties operation.\n */\nexport interface ServiceSetPropertiesHeaders {\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for GetProperties operation.\n */\nexport interface ServiceGetPropertiesHeaders {\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for ListSharesSegment operation.\n */\nexport interface ServiceListSharesSegmentHeaders {\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for Create operation.\n */\nexport interface ShareCreateHeaders {\n  /**\n   * The ETag contains a value which represents the version of the share, in quotes.\n   */\n  etag?: string;\n  /**\n   * Returns the date and time the share was last modified. Any operation that modifies the share\n   * or its properties or metadata updates the last modified time. Operations on files do not\n   * affect the last modified time of the share.\n   */\n  lastModified?: Date;\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for GetProperties operation.\n */\nexport interface ShareGetPropertiesHeaders {\n  metadata?: { [propertyName: string]: string };\n  /**\n   * The ETag contains a value that you can use to perform operations conditionally, in quotes.\n   */\n  etag?: string;\n  /**\n   * Returns the date and time the share was last modified. Any operation that modifies the share\n   * or its properties updates the last modified time. Operations on files do not affect the last\n   * modified time of the share.\n   */\n  lastModified?: Date;\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  /**\n   * Returns the current share quota in GB.\n   */\n  quota?: number;\n  /**\n   * Returns the current share provisioned ipos.\n   */\n  provisionedIops?: number;\n  /**\n   * Returns the current share provisioned ingress in megabytes per second.\n   */\n  provisionedIngressMBps?: number;\n  /**\n   * Returns the current share provisioned egress in megabytes per second.\n   */\n  provisionedEgressMBps?: number;\n  /**\n   * Returns the current share next allowed quota downgrade time.\n   */\n  nextAllowedQuotaDowngradeTime?: Date;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for Delete operation.\n */\nexport interface ShareDeleteHeaders {\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for CreateSnapshot operation.\n */\nexport interface ShareCreateSnapshotHeaders {\n  /**\n   * This header is a DateTime value that uniquely identifies the share snapshot. The value of this\n   * header may be used in subsequent requests to access the share snapshot. This value is opaque.\n   */\n  snapshot?: string;\n  /**\n   * The ETag contains a value which represents the version of the share snapshot, in quotes. A\n   * share snapshot cannot be modified, so the ETag of a given share snapshot never changes.\n   * However, if new metadata was supplied with the Snapshot Share request then the ETag of the\n   * share snapshot differs from that of the base share. If no metadata was specified with the\n   * request, the ETag of the share snapshot is identical to that of the base share at the time the\n   * share snapshot was taken.\n   */\n  etag?: string;\n  /**\n   * Returns the date and time the share was last modified. A share snapshot cannot be modified, so\n   * the last modified time of a given share snapshot never changes. However, if new metadata was\n   * supplied with the Snapshot Share request then the last modified time of the share snapshot\n   * differs from that of the base share. If no metadata was specified with the request, the last\n   * modified time of the share snapshot is identical to that of the base share at the time the\n   * share snapshot was taken.\n   */\n  lastModified?: Date;\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for CreatePermission operation.\n */\nexport interface ShareCreatePermissionHeaders {\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  /**\n   * Key of the permission set for the directory/file.\n   */\n  filePermissionKey?: string;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for GetPermission operation.\n */\nexport interface ShareGetPermissionHeaders {\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for SetQuota operation.\n */\nexport interface ShareSetQuotaHeaders {\n  /**\n   * The ETag contains a value that you can use to perform operations conditionally, in quotes.\n   */\n  etag?: string;\n  /**\n   * Returns the date and time the share was last modified. Any operation that modifies the share\n   * or its properties updates the last modified time. Operations on files do not affect the last\n   * modified time of the share.\n   */\n  lastModified?: Date;\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for SetMetadata operation.\n */\nexport interface ShareSetMetadataHeaders {\n  /**\n   * The ETag contains a value that you can use to perform operations conditionally, in quotes.\n   */\n  etag?: string;\n  /**\n   * Returns the date and time the share was last modified. Any operation that modifies the share\n   * or its properties updates the last modified time. Operations on files do not affect the last\n   * modified time of the share.\n   */\n  lastModified?: Date;\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for GetAccessPolicy operation.\n */\nexport interface ShareGetAccessPolicyHeaders {\n  /**\n   * The ETag contains a value that you can use to perform operations conditionally, in quotes.\n   */\n  etag?: string;\n  /**\n   * Returns the date and time the share was last modified. Any operation that modifies the share\n   * or its properties updates the last modified time. Operations on files do not affect the last\n   * modified time of the share.\n   */\n  lastModified?: Date;\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for SetAccessPolicy operation.\n */\nexport interface ShareSetAccessPolicyHeaders {\n  /**\n   * The ETag contains a value that you can use to perform operations conditionally, in quotes.\n   */\n  etag?: string;\n  /**\n   * Returns the date and time the share was last modified. Any operation that modifies the share\n   * or its properties updates the last modified time. Operations on files do not affect the last\n   * modified time of the share.\n   */\n  lastModified?: Date;\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for GetStatistics operation.\n */\nexport interface ShareGetStatisticsHeaders {\n  /**\n   * The ETag contains a value that you can use to perform operations conditionally, in quotes.\n   */\n  etag?: string;\n  /**\n   * Returns the date and time the share was last modified. Any operation that modifies the share\n   * or its properties updates the last modified time. Operations on files do not affect the last\n   * modified time of the share.\n   */\n  lastModified?: Date;\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for Restore operation.\n */\nexport interface ShareRestoreHeaders {\n  /**\n   * The ETag contains a value that you can use to perform operations conditionally, in quotes.\n   */\n  etag?: string;\n  /**\n   * Returns the date and time the share was last modified. Any operation that modifies the share\n   * or its properties updates the last modified time. Operations on files do not affect the last\n   * modified time of the share.\n   */\n  lastModified?: Date;\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * If a client request id header is sent in the request, this header will be present in the\n   * response with the same value.\n   */\n  clientRequestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for Create operation.\n */\nexport interface DirectoryCreateHeaders {\n  /**\n   * The ETag contains a value which represents the version of the directory, in quotes.\n   */\n  etag?: string;\n  /**\n   * Returns the date and time the share was last modified. Any operation that modifies the\n   * directory or its properties updates the last modified time. Operations on files do not affect\n   * the last modified time of the directory.\n   */\n  lastModified?: Date;\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  /**\n   * The value of this header is set to true if the contents of the request are successfully\n   * encrypted using the specified algorithm, and false otherwise.\n   */\n  isServerEncrypted?: boolean;\n  /**\n   * Key of the permission set for the directory.\n   */\n  filePermissionKey?: string;\n  /**\n   * Attributes set for the directory.\n   */\n  fileAttributes?: string;\n  /**\n   * Creation time for the directory.\n   */\n  fileCreatedOn?: Date;\n  /**\n   * Last write time for the directory.\n   */\n  fileLastWriteOn?: Date;\n  /**\n   * Change time for the directory.\n   */\n  fileChangeOn?: Date;\n  /**\n   * The fileId of the directory.\n   */\n  fileId?: string;\n  /**\n   * The parent fileId of the directory.\n   */\n  fileParentId?: string;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for GetProperties operation.\n */\nexport interface DirectoryGetPropertiesHeaders {\n  metadata?: { [propertyName: string]: string };\n  /**\n   * The ETag contains a value that you can use to perform operations conditionally, in quotes.\n   */\n  etag?: string;\n  /**\n   * Returns the date and time the Directory was last modified. Operations on files within the\n   * directory do not affect the last modified time of the directory.\n   */\n  lastModified?: Date;\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  /**\n   * The value of this header is set to true if the directory metadata is completely encrypted\n   * using the specified algorithm. Otherwise, the value is set to false.\n   */\n  isServerEncrypted?: boolean;\n  /**\n   * Attributes set for the directory.\n   */\n  fileAttributes?: string;\n  /**\n   * Creation time for the directory.\n   */\n  fileCreatedOn?: Date;\n  /**\n   * Last write time for the directory.\n   */\n  fileLastWriteOn?: Date;\n  /**\n   * Change time for the directory.\n   */\n  fileChangeOn?: Date;\n  /**\n   * Key of the permission set for the directory.\n   */\n  filePermissionKey?: string;\n  /**\n   * The fileId of the directory.\n   */\n  fileId?: string;\n  /**\n   * The parent fileId of the directory.\n   */\n  fileParentId?: string;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for Delete operation.\n */\nexport interface DirectoryDeleteHeaders {\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for SetProperties operation.\n */\nexport interface DirectorySetPropertiesHeaders {\n  /**\n   * The ETag contains a value which represents the version of the file, in quotes.\n   */\n  etag?: string;\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Returns the date and time the directory was last modified. Any operation that modifies the\n   * directory or its properties updates the last modified time. Operations on files do not affect\n   * the last modified time of the directory.\n   */\n  lastModified?: Date;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  /**\n   * The value of this header is set to true if the contents of the request are successfully\n   * encrypted using the specified algorithm, and false otherwise.\n   */\n  isServerEncrypted?: boolean;\n  /**\n   * Key of the permission set for the directory.\n   */\n  filePermissionKey?: string;\n  /**\n   * Attributes set for the directory.\n   */\n  fileAttributes?: string;\n  /**\n   * Creation time for the directory.\n   */\n  fileCreatedOn?: Date;\n  /**\n   * Last write time for the directory.\n   */\n  fileLastWriteOn?: Date;\n  /**\n   * Change time for the directory.\n   */\n  fileChangeOn?: Date;\n  /**\n   * The fileId of the directory.\n   */\n  fileId?: string;\n  /**\n   * The parent fileId of the directory.\n   */\n  fileParentId?: string;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for SetMetadata operation.\n */\nexport interface DirectorySetMetadataHeaders {\n  /**\n   * The ETag contains a value which represents the version of the directory, in quotes.\n   */\n  etag?: string;\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  /**\n   * The value of this header is set to true if the contents of the request are successfully\n   * encrypted using the specified algorithm, and false otherwise.\n   */\n  isServerEncrypted?: boolean;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for ListFilesAndDirectoriesSegment operation.\n */\nexport interface DirectoryListFilesAndDirectoriesSegmentHeaders {\n  /**\n   * Specifies the format in which the results are returned. Currently this value is\n   * 'application/xml'.\n   */\n  contentType?: string;\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for ListHandles operation.\n */\nexport interface DirectoryListHandlesHeaders {\n  /**\n   * Specifies the format in which the results are returned. Currently this value is\n   * 'application/xml'.\n   */\n  contentType?: string;\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for ForceCloseHandles operation.\n */\nexport interface DirectoryForceCloseHandlesHeaders {\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  /**\n   * A string describing next handle to be closed. It is returned when more handles need to be\n   * closed to complete the request.\n   */\n  marker?: string;\n  /**\n   * Contains count of number of handles closed.\n   */\n  numberOfHandlesClosed?: number;\n  /**\n   * Contains count of number of handles that failed to close.\n   */\n  numberOfHandlesFailedToClose?: number;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for Create operation.\n */\nexport interface FileCreateHeaders {\n  /**\n   * The ETag contains a value which represents the version of the file, in quotes.\n   */\n  etag?: string;\n  /**\n   * Returns the date and time the share was last modified. Any operation that modifies the\n   * directory or its properties updates the last modified time. Operations on files do not affect\n   * the last modified time of the directory.\n   */\n  lastModified?: Date;\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  /**\n   * The value of this header is set to true if the contents of the request are successfully\n   * encrypted using the specified algorithm, and false otherwise.\n   */\n  isServerEncrypted?: boolean;\n  /**\n   * Key of the permission set for the file.\n   */\n  filePermissionKey?: string;\n  /**\n   * Attributes set for the file.\n   */\n  fileAttributes?: string;\n  /**\n   * Creation time for the file.\n   */\n  fileCreatedOn?: Date;\n  /**\n   * Last write time for the file.\n   */\n  fileLastWriteOn?: Date;\n  /**\n   * Change time for the file.\n   */\n  fileChangeOn?: Date;\n  /**\n   * The fileId of the file.\n   */\n  fileId?: string;\n  /**\n   * The parent fileId of the file.\n   */\n  fileParentId?: string;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for Download operation.\n */\nexport interface FileDownloadHeaders {\n  /**\n   * Returns the date and time the file was last modified. Any operation that modifies the file or\n   * its properties updates the last modified time.\n   */\n  lastModified?: Date;\n  metadata?: { [propertyName: string]: string };\n  /**\n   * The number of bytes present in the response body.\n   */\n  contentLength?: number;\n  /**\n   * The content type specified for the file. The default content type is\n   * 'application/octet-stream'\n   */\n  contentType?: string;\n  /**\n   * Indicates the range of bytes returned if the client requested a subset of the file by setting\n   * the Range request header.\n   */\n  contentRange?: string;\n  /**\n   * The ETag contains a value that you can use to perform operations conditionally, in quotes.\n   */\n  etag?: string;\n  /**\n   * If the file has an MD5 hash and the request is to read the full file, this response header is\n   * returned so that the client can check for message content integrity. If the request is to read\n   * a specified range and the 'x-ms-range-get-content-md5' is set to true, then the request\n   * returns an MD5 hash for the range, as long as the range size is less than or equal to 4 MB. If\n   * neither of these sets of conditions is true, then no value is returned for the 'Content-MD5'\n   * header.\n   */\n  contentMD5?: Uint8Array;\n  /**\n   * Returns the value that was specified for the Content-Encoding request header.\n   */\n  contentEncoding?: string;\n  /**\n   * Returned if it was previously specified for the file.\n   */\n  cacheControl?: string;\n  /**\n   * Returns the value that was specified for the 'x-ms-content-disposition' header and specifies\n   * how to process the response.\n   */\n  contentDisposition?: string;\n  /**\n   * Returns the value that was specified for the Content-Language request header.\n   */\n  contentLanguage?: string;\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * Indicates that the service supports requests for partial file content.\n   */\n  acceptRanges?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  /**\n   * Conclusion time of the last attempted Copy File operation where this file was the destination\n   * file. This value can specify the time of a completed, aborted, or failed copy attempt.\n   */\n  copyCompletedOn?: Date;\n  /**\n   * Only appears when x-ms-copy-status is failed or pending. Describes cause of fatal or non-fatal\n   * copy operation failure.\n   */\n  copyStatusDescription?: string;\n  /**\n   * String identifier for the last attempted Copy File operation where this file was the\n   * destination file.\n   */\n  copyId?: string;\n  /**\n   * Contains the number of bytes copied and the total bytes in the source in the last attempted\n   * Copy File operation where this file was the destination file. Can show between 0 and\n   * Content-Length bytes copied.\n   */\n  copyProgress?: string;\n  /**\n   * URL up to 2KB in length that specifies the source file used in the last attempted Copy File\n   * operation where this file was the destination file.\n   */\n  copySource?: string;\n  /**\n   * State of the copy operation identified by 'x-ms-copy-id'. Possible values include: 'pending',\n   * 'success', 'aborted', 'failed'\n   */\n  copyStatus?: CopyStatusType;\n  /**\n   * If the file has a MD5 hash, and if request contains range header (Range or x-ms-range), this\n   * response header is returned with the value of the whole file's MD5 value. This value may or\n   * may not be equal to the value returned in Content-MD5 header, with the latter calculated from\n   * the requested range.\n   */\n  fileContentMD5?: Uint8Array;\n  /**\n   * The value of this header is set to true if the file data and application metadata are\n   * completely encrypted using the specified algorithm. Otherwise, the value is set to false (when\n   * the file is unencrypted, or if only parts of the file/application metadata are encrypted).\n   */\n  isServerEncrypted?: boolean;\n  /**\n   * Attributes set for the file.\n   */\n  fileAttributes?: string;\n  /**\n   * Creation time for the file.\n   */\n  fileCreatedOn?: Date;\n  /**\n   * Last write time for the file.\n   */\n  fileLastWriteOn?: Date;\n  /**\n   * Change time for the file.\n   */\n  fileChangeOn?: Date;\n  /**\n   * Key of the permission set for the file.\n   */\n  filePermissionKey?: string;\n  /**\n   * The fileId of the file.\n   */\n  fileId?: string;\n  /**\n   * The parent fileId of the file.\n   */\n  fileParentId?: string;\n  /**\n   * When a file is leased, specifies whether the lease is of infinite or fixed duration. Possible\n   * values include: 'infinite', 'fixed'\n   */\n  leaseDuration?: LeaseDurationType;\n  /**\n   * Lease state of the file. Possible values include: 'available', 'leased', 'expired',\n   * 'breaking', 'broken'\n   */\n  leaseState?: LeaseStateType;\n  /**\n   * The current lease status of the file. Possible values include: 'locked', 'unlocked'\n   */\n  leaseStatus?: LeaseStatusType;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for GetProperties operation.\n */\nexport interface FileGetPropertiesHeaders {\n  /**\n   * Returns the date and time the file was last modified. The date format follows RFC 1123. Any\n   * operation that modifies the file or its properties updates the last modified time.\n   */\n  lastModified?: Date;\n  metadata?: { [propertyName: string]: string };\n  /**\n   * Returns the type File. Reserved for future use. Possible values include: 'File'\n   */\n  fileType?: FileType;\n  /**\n   * The size of the file in bytes. This header returns the value of the 'x-ms-content-length'\n   * header that is stored with the file.\n   */\n  contentLength?: number;\n  /**\n   * The content type specified for the file. The default content type is\n   * 'application/octet-stream'\n   */\n  contentType?: string;\n  /**\n   * The ETag contains a value that you can use to perform operations conditionally, in quotes.\n   */\n  etag?: string;\n  /**\n   * If the Content-MD5 header has been set for the file, the Content-MD5 response header is\n   * returned so that the client can check for message content integrity.\n   */\n  contentMD5?: Uint8Array;\n  /**\n   * If the Content-Encoding request header has previously been set for the file, the\n   * Content-Encoding value is returned in this header.\n   */\n  contentEncoding?: string;\n  /**\n   * If the Cache-Control request header has previously been set for the file, the Cache-Control\n   * value is returned in this header.\n   */\n  cacheControl?: string;\n  /**\n   * Returns the value that was specified for the 'x-ms-content-disposition' header and specifies\n   * how to process the response.\n   */\n  contentDisposition?: string;\n  /**\n   * Returns the value that was specified for the Content-Language request header.\n   */\n  contentLanguage?: string;\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  /**\n   * Conclusion time of the last attempted Copy File operation where this file was the destination\n   * file. This value can specify the time of a completed, aborted, or failed copy attempt.\n   */\n  copyCompletedOn?: Date;\n  /**\n   * Only appears when x-ms-copy-status is failed or pending. Describes cause of fatal or non-fatal\n   * copy operation failure.\n   */\n  copyStatusDescription?: string;\n  /**\n   * String identifier for the last attempted Copy File operation where this file was the\n   * destination file.\n   */\n  copyId?: string;\n  /**\n   * Contains the number of bytes copied and the total bytes in the source in the last attempted\n   * Copy File operation where this file was the destination file. Can show between 0 and\n   * Content-Length bytes copied.\n   */\n  copyProgress?: string;\n  /**\n   * URL up to 2KB in length that specifies the source file used in the last attempted Copy File\n   * operation where this file was the destination file.\n   */\n  copySource?: string;\n  /**\n   * State of the copy operation identified by 'x-ms-copy-id'. Possible values include: 'pending',\n   * 'success', 'aborted', 'failed'\n   */\n  copyStatus?: CopyStatusType;\n  /**\n   * The value of this header is set to true if the file data and application metadata are\n   * completely encrypted using the specified algorithm. Otherwise, the value is set to false (when\n   * the file is unencrypted, or if only parts of the file/application metadata are encrypted).\n   */\n  isServerEncrypted?: boolean;\n  /**\n   * Attributes set for the file.\n   */\n  fileAttributes?: string;\n  /**\n   * Creation time for the file.\n   */\n  fileCreatedOn?: Date;\n  /**\n   * Last write time for the file.\n   */\n  fileLastWriteOn?: Date;\n  /**\n   * Change time for the file.\n   */\n  fileChangeOn?: Date;\n  /**\n   * Key of the permission set for the file.\n   */\n  filePermissionKey?: string;\n  /**\n   * The fileId of the file.\n   */\n  fileId?: string;\n  /**\n   * The parent fileId of the file.\n   */\n  fileParentId?: string;\n  /**\n   * When a file is leased, specifies whether the lease is of infinite or fixed duration. Possible\n   * values include: 'infinite', 'fixed'\n   */\n  leaseDuration?: LeaseDurationType;\n  /**\n   * Lease state of the file. Possible values include: 'available', 'leased', 'expired',\n   * 'breaking', 'broken'\n   */\n  leaseState?: LeaseStateType;\n  /**\n   * The current lease status of the file. Possible values include: 'locked', 'unlocked'\n   */\n  leaseStatus?: LeaseStatusType;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for Delete operation.\n */\nexport interface FileDeleteHeaders {\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for SetHTTPHeaders operation.\n */\nexport interface FileSetHTTPHeadersHeaders {\n  /**\n   * The ETag contains a value which represents the version of the file, in quotes.\n   */\n  etag?: string;\n  /**\n   * Returns the date and time the directory was last modified. Any operation that modifies the\n   * directory or its properties updates the last modified time. Operations on files do not affect\n   * the last modified time of the directory.\n   */\n  lastModified?: Date;\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  /**\n   * The value of this header is set to true if the contents of the request are successfully\n   * encrypted using the specified algorithm, and false otherwise.\n   */\n  isServerEncrypted?: boolean;\n  /**\n   * Key of the permission set for the file.\n   */\n  filePermissionKey?: string;\n  /**\n   * Attributes set for the file.\n   */\n  fileAttributes?: string;\n  /**\n   * Creation time for the file.\n   */\n  fileCreatedOn?: Date;\n  /**\n   * Last write time for the file.\n   */\n  fileLastWriteOn?: Date;\n  /**\n   * Change time for the file.\n   */\n  fileChangeOn?: Date;\n  /**\n   * The fileId of the directory.\n   */\n  fileId?: string;\n  /**\n   * The parent fileId of the directory.\n   */\n  fileParentId?: string;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for SetMetadata operation.\n */\nexport interface FileSetMetadataHeaders {\n  /**\n   * The ETag contains a value which represents the version of the file, in quotes.\n   */\n  etag?: string;\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  /**\n   * The value of this header is set to true if the contents of the request are successfully\n   * encrypted using the specified algorithm, and false otherwise.\n   */\n  isServerEncrypted?: boolean;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for AcquireLease operation.\n */\nexport interface FileAcquireLeaseHeaders {\n  /**\n   * The ETag contains a value that you can use to perform operations conditionally. If the request\n   * version is 2011-08-18 or newer, the ETag value will be in quotes.\n   */\n  etag?: string;\n  /**\n   * Returns the date and time the file was last modified. Any operation that modifies the file,\n   * including an update of the file's metadata or properties, changes the last-modified time of\n   * the file.\n   */\n  lastModified?: Date;\n  /**\n   * Uniquely identifies a file's lease\n   */\n  leaseId?: string;\n  /**\n   * If a client request id header is sent in the request, this header will be present in the\n   * response with the same value.\n   */\n  clientRequestId?: string;\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * UTC date/time value generated by the service that indicates the time at which the response was\n   * initiated\n   */\n  date?: Date;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for ReleaseLease operation.\n */\nexport interface FileReleaseLeaseHeaders {\n  /**\n   * The ETag contains a value that you can use to perform operations conditionally. If the request\n   * version is 2011-08-18 or newer, the ETag value will be in quotes.\n   */\n  etag?: string;\n  /**\n   * Returns the date and time the file was last modified. Any operation that modifies the file,\n   * including an update of the file's metadata or properties, changes the last-modified time of\n   * the file.\n   */\n  lastModified?: Date;\n  /**\n   * If a client request id header is sent in the request, this header will be present in the\n   * response with the same value.\n   */\n  clientRequestId?: string;\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * UTC date/time value generated by the service that indicates the time at which the response was\n   * initiated\n   */\n  date?: Date;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for ChangeLease operation.\n */\nexport interface FileChangeLeaseHeaders {\n  /**\n   * The ETag contains a value that you can use to perform operations conditionally. If the request\n   * version is 2011-08-18 or newer, the ETag value will be in quotes.\n   */\n  etag?: string;\n  /**\n   * Returns the date and time the file was last modified. Any operation that modifies the file,\n   * including an update of the file's metadata or properties, changes the last-modified time of\n   * the file.\n   */\n  lastModified?: Date;\n  /**\n   * Uniquely identifies a file's lease\n   */\n  leaseId?: string;\n  /**\n   * If a client request id header is sent in the request, this header will be present in the\n   * response with the same value.\n   */\n  clientRequestId?: string;\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * UTC date/time value generated by the service that indicates the time at which the response was\n   * initiated\n   */\n  date?: Date;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for BreakLease operation.\n */\nexport interface FileBreakLeaseHeaders {\n  /**\n   * The ETag contains a value that you can use to perform operations conditionally. If the request\n   * version is 2011-08-18 or newer, the ETag value will be in quotes.\n   */\n  etag?: string;\n  /**\n   * Returns the date and time the file was last modified. Any operation that modifies the file,\n   * including an update of the file's metadata or properties, changes the last-modified time of\n   * the file.\n   */\n  lastModified?: Date;\n  /**\n   * Uniquely identifies a file's lease\n   */\n  leaseId?: string;\n  /**\n   * If a client request id header is sent in the request, this header will be present in the\n   * response with the same value.\n   */\n  clientRequestId?: string;\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * UTC date/time value generated by the service that indicates the time at which the response was\n   * initiated\n   */\n  date?: Date;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for UploadRange operation.\n */\nexport interface FileUploadRangeHeaders {\n  /**\n   * The ETag contains a value which represents the version of the file, in quotes.\n   */\n  etag?: string;\n  /**\n   * Returns the date and time the directory was last modified. Any operation that modifies the\n   * share or its properties or metadata updates the last modified time. Operations on files do not\n   * affect the last modified time of the share.\n   */\n  lastModified?: Date;\n  /**\n   * This header is returned so that the client can check for message content integrity. The value\n   * of this header is computed by the File service; it is not necessarily the same value as may\n   * have been specified in the request headers.\n   */\n  contentMD5?: Uint8Array;\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  /**\n   * The value of this header is set to true if the contents of the request are successfully\n   * encrypted using the specified algorithm, and false otherwise.\n   */\n  isServerEncrypted?: boolean;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for UploadRangeFromURL operation.\n */\nexport interface FileUploadRangeFromURLHeaders {\n  /**\n   * The ETag contains a value which represents the version of the file, in quotes.\n   */\n  etag?: string;\n  /**\n   * Returns the date and time the directory was last modified. Any operation that modifies the\n   * share or its properties or metadata updates the last modified time. Operations on files do not\n   * affect the last modified time of the share.\n   */\n  lastModified?: Date;\n  /**\n   * This header is returned so that the client can check for message content integrity. The value\n   * of this header is computed by the File service; it is not necessarily the same value as may\n   * have been specified in the request headers.\n   */\n  xMsContentCrc64?: Uint8Array;\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  /**\n   * The value of this header is set to true if the contents of the request are successfully\n   * encrypted using the specified algorithm, and false otherwise.\n   */\n  isServerEncrypted?: boolean;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for GetRangeList operation.\n */\nexport interface FileGetRangeListHeaders {\n  /**\n   * The date/time that the file was last modified. Any operation that modifies the file, including\n   * an update of the file's metadata or properties, changes the file's last modified time.\n   */\n  lastModified?: Date;\n  /**\n   * The ETag contains a value which represents the version of the file, in quotes.\n   */\n  etag?: string;\n  /**\n   * The size of the file in bytes.\n   */\n  fileContentLength?: number;\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for StartCopy operation.\n */\nexport interface FileStartCopyHeaders {\n  /**\n   * If the copy is completed, contains the ETag of the destination file. If the copy is not\n   * complete, contains the ETag of the empty file created at the start of the copy.\n   */\n  etag?: string;\n  /**\n   * Returns the date/time that the copy operation to the destination file completed.\n   */\n  lastModified?: Date;\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  /**\n   * String identifier for this copy operation. Use with Get File or Get File Properties to check\n   * the status of this copy operation, or pass to Abort Copy File to abort a pending copy.\n   */\n  copyId?: string;\n  /**\n   * State of the copy operation identified by x-ms-copy-id. Possible values include: 'pending',\n   * 'success', 'aborted', 'failed'\n   */\n  copyStatus?: CopyStatusType;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for AbortCopy operation.\n */\nexport interface FileAbortCopyHeaders {\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for ListHandles operation.\n */\nexport interface FileListHandlesHeaders {\n  /**\n   * Specifies the format in which the results are returned. Currently this value is\n   * 'application/xml'.\n   */\n  contentType?: string;\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  errorCode?: string;\n}\n\n/**\n * Defines headers for ForceCloseHandles operation.\n */\nexport interface FileForceCloseHandlesHeaders {\n  /**\n   * This header uniquely identifies the request that was made and can be used for troubleshooting\n   * the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the File service used to execute the request.\n   */\n  version?: string;\n  /**\n   * A UTC date/time value generated by the service that indicates the time at which the response\n   * was initiated.\n   */\n  date?: Date;\n  /**\n   * A string describing next handle to be closed. It is returned when more handles need to be\n   * closed to complete the request.\n   */\n  marker?: string;\n  /**\n   * Contains count of number of handles closed.\n   */\n  numberOfHandlesClosed?: number;\n  /**\n   * Contains count of number of handles that failed to close.\n   */\n  numberOfHandlesFailedToClose?: number;\n  errorCode?: string;\n}\n\n/**\n * Defines values for StorageErrorCode.\n * Possible values include: 'AccountAlreadyExists', 'AccountBeingCreated', 'AccountIsDisabled',\n * 'AuthenticationFailed', 'AuthorizationFailure', 'ConditionHeadersNotSupported',\n * 'ConditionNotMet', 'EmptyMetadataKey', 'InsufficientAccountPermissions', 'InternalError',\n * 'InvalidAuthenticationInfo', 'InvalidHeaderValue', 'InvalidHttpVerb', 'InvalidInput',\n * 'InvalidMd5', 'InvalidMetadata', 'InvalidQueryParameterValue', 'InvalidRange',\n * 'InvalidResourceName', 'InvalidUri', 'InvalidXmlDocument', 'InvalidXmlNodeValue', 'Md5Mismatch',\n * 'MetadataTooLarge', 'MissingContentLengthHeader', 'MissingRequiredQueryParameter',\n * 'MissingRequiredHeader', 'MissingRequiredXmlNode', 'MultipleConditionHeadersNotSupported',\n * 'OperationTimedOut', 'OutOfRangeInput', 'OutOfRangeQueryParameterValue', 'RequestBodyTooLarge',\n * 'ResourceTypeMismatch', 'RequestUrlFailedToParse', 'ResourceAlreadyExists', 'ResourceNotFound',\n * 'ServerBusy', 'UnsupportedHeader', 'UnsupportedXmlNode', 'UnsupportedQueryParameter',\n * 'UnsupportedHttpVerb', 'CannotDeleteFileOrDirectory', 'ClientCacheFlushDelay', 'DeletePending',\n * 'DirectoryNotEmpty', 'FileLockConflict', 'InvalidFileOrDirectoryPathName', 'ParentNotFound',\n * 'ReadOnlyAttribute', 'ShareAlreadyExists', 'ShareBeingDeleted', 'ShareDisabled',\n * 'ShareNotFound', 'SharingViolation', 'ShareSnapshotInProgress', 'ShareSnapshotCountExceeded',\n * 'ShareSnapshotOperationNotSupported', 'ShareHasSnapshots', 'ContainerQuotaDowngradeNotAllowed',\n * 'AuthorizationSourceIPMismatch', 'AuthorizationProtocolMismatch',\n * 'AuthorizationPermissionMismatch', 'AuthorizationServiceMismatch',\n * 'AuthorizationResourceTypeMismatch', 'FeatureVersionMismatch'\n * @readonly\n * @enum {string}\n */\nexport type StorageErrorCode = 'AccountAlreadyExists' | 'AccountBeingCreated' | 'AccountIsDisabled' | 'AuthenticationFailed' | 'AuthorizationFailure' | 'ConditionHeadersNotSupported' | 'ConditionNotMet' | 'EmptyMetadataKey' | 'InsufficientAccountPermissions' | 'InternalError' | 'InvalidAuthenticationInfo' | 'InvalidHeaderValue' | 'InvalidHttpVerb' | 'InvalidInput' | 'InvalidMd5' | 'InvalidMetadata' | 'InvalidQueryParameterValue' | 'InvalidRange' | 'InvalidResourceName' | 'InvalidUri' | 'InvalidXmlDocument' | 'InvalidXmlNodeValue' | 'Md5Mismatch' | 'MetadataTooLarge' | 'MissingContentLengthHeader' | 'MissingRequiredQueryParameter' | 'MissingRequiredHeader' | 'MissingRequiredXmlNode' | 'MultipleConditionHeadersNotSupported' | 'OperationTimedOut' | 'OutOfRangeInput' | 'OutOfRangeQueryParameterValue' | 'RequestBodyTooLarge' | 'ResourceTypeMismatch' | 'RequestUrlFailedToParse' | 'ResourceAlreadyExists' | 'ResourceNotFound' | 'ServerBusy' | 'UnsupportedHeader' | 'UnsupportedXmlNode' | 'UnsupportedQueryParameter' | 'UnsupportedHttpVerb' | 'CannotDeleteFileOrDirectory' | 'ClientCacheFlushDelay' | 'DeletePending' | 'DirectoryNotEmpty' | 'FileLockConflict' | 'InvalidFileOrDirectoryPathName' | 'ParentNotFound' | 'ReadOnlyAttribute' | 'ShareAlreadyExists' | 'ShareBeingDeleted' | 'ShareDisabled' | 'ShareNotFound' | 'SharingViolation' | 'ShareSnapshotInProgress' | 'ShareSnapshotCountExceeded' | 'ShareSnapshotOperationNotSupported' | 'ShareHasSnapshots' | 'ContainerQuotaDowngradeNotAllowed' | 'AuthorizationSourceIPMismatch' | 'AuthorizationProtocolMismatch' | 'AuthorizationPermissionMismatch' | 'AuthorizationServiceMismatch' | 'AuthorizationResourceTypeMismatch' | 'FeatureVersionMismatch';\n\n/**\n * Defines values for PermissionCopyModeType.\n * Possible values include: 'source', 'override'\n * @readonly\n * @enum {string}\n */\nexport type PermissionCopyModeType = 'source' | 'override';\n\n/**\n * Defines values for DeleteSnapshotsOptionType.\n * Possible values include: 'include'\n * @readonly\n * @enum {string}\n */\nexport type DeleteSnapshotsOptionType = 'include';\n\n/**\n * Defines values for ListSharesIncludeType.\n * Possible values include: 'snapshots', 'metadata', 'deleted'\n * @readonly\n * @enum {string}\n */\nexport type ListSharesIncludeType = 'snapshots' | 'metadata' | 'deleted';\n\n/**\n * Defines values for CopyStatusType.\n * Possible values include: 'pending', 'success', 'aborted', 'failed'\n * @readonly\n * @enum {string}\n */\nexport type CopyStatusType = 'pending' | 'success' | 'aborted' | 'failed';\n\n/**\n * Defines values for LeaseDurationType.\n * Possible values include: 'infinite', 'fixed'\n * @readonly\n * @enum {string}\n */\nexport type LeaseDurationType = 'infinite' | 'fixed';\n\n/**\n * Defines values for LeaseStateType.\n * Possible values include: 'available', 'leased', 'expired', 'breaking', 'broken'\n * @readonly\n * @enum {string}\n */\nexport type LeaseStateType = 'available' | 'leased' | 'expired' | 'breaking' | 'broken';\n\n/**\n * Defines values for LeaseStatusType.\n * Possible values include: 'locked', 'unlocked'\n * @readonly\n * @enum {string}\n */\nexport type LeaseStatusType = 'locked' | 'unlocked';\n\n/**\n * Defines values for FileRangeWriteType.\n * Possible values include: 'update', 'clear'\n * @readonly\n * @enum {string}\n */\nexport type FileRangeWriteType = 'update' | 'clear';\n\n/**\n * Defines values for FileType.\n * Possible values include: 'File'\n * @readonly\n * @enum {string}\n */\nexport type FileType = 'File';\n\n/**\n * Contains response data for the setProperties operation.\n */\nexport type ServiceSetPropertiesResponse = ServiceSetPropertiesHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ServiceSetPropertiesHeaders;\n    };\n};\n\n/**\n * Contains response data for the getProperties operation.\n */\nexport type ServiceGetPropertiesResponse = FileServiceProperties & ServiceGetPropertiesHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ServiceGetPropertiesHeaders;\n\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: FileServiceProperties;\n    };\n};\n\n/**\n * Contains response data for the listSharesSegment operation.\n */\nexport type ServiceListSharesSegmentResponse = ListSharesResponse & ServiceListSharesSegmentHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ServiceListSharesSegmentHeaders;\n\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ListSharesResponse;\n    };\n};\n\n/**\n * Contains response data for the create operation.\n */\nexport type ShareCreateResponse = ShareCreateHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ShareCreateHeaders;\n    };\n};\n\n/**\n * Contains response data for the getProperties operation.\n */\nexport type ShareGetPropertiesResponse = ShareGetPropertiesHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ShareGetPropertiesHeaders;\n    };\n};\n\n/**\n * Contains response data for the deleteMethod operation.\n */\nexport type ShareDeleteResponse = ShareDeleteHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ShareDeleteHeaders;\n    };\n};\n\n/**\n * Contains response data for the createSnapshot operation.\n */\nexport type ShareCreateSnapshotResponse = ShareCreateSnapshotHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ShareCreateSnapshotHeaders;\n    };\n};\n\n/**\n * Contains response data for the createPermission operation.\n */\nexport type ShareCreatePermissionResponse = ShareCreatePermissionHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ShareCreatePermissionHeaders;\n    };\n};\n\n/**\n * Contains response data for the getPermission operation.\n */\nexport type ShareGetPermissionResponse = SharePermission & ShareGetPermissionHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ShareGetPermissionHeaders;\n\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: SharePermission;\n    };\n};\n\n/**\n * Contains response data for the setQuota operation.\n */\nexport type ShareSetQuotaResponse = ShareSetQuotaHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ShareSetQuotaHeaders;\n    };\n};\n\n/**\n * Contains response data for the setMetadata operation.\n */\nexport type ShareSetMetadataResponse = ShareSetMetadataHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ShareSetMetadataHeaders;\n    };\n};\n\n/**\n * Contains response data for the getAccessPolicy operation.\n */\nexport type ShareGetAccessPolicyResponse = Array<SignedIdentifier> & ShareGetAccessPolicyHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ShareGetAccessPolicyHeaders;\n\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: SignedIdentifier[];\n    };\n};\n\n/**\n * Contains response data for the setAccessPolicy operation.\n */\nexport type ShareSetAccessPolicyResponse = ShareSetAccessPolicyHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ShareSetAccessPolicyHeaders;\n    };\n};\n\n/**\n * Contains response data for the getStatistics operation.\n */\nexport type ShareGetStatisticsResponse = ShareStats & ShareGetStatisticsHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ShareGetStatisticsHeaders;\n\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ShareStats;\n    };\n};\n\n/**\n * Contains response data for the restore operation.\n */\nexport type ShareRestoreResponse = ShareRestoreHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ShareRestoreHeaders;\n    };\n};\n\n/**\n * Contains response data for the create operation.\n */\nexport type DirectoryCreateResponse = DirectoryCreateHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: DirectoryCreateHeaders;\n    };\n};\n\n/**\n * Contains response data for the getProperties operation.\n */\nexport type DirectoryGetPropertiesResponse = DirectoryGetPropertiesHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: DirectoryGetPropertiesHeaders;\n    };\n};\n\n/**\n * Contains response data for the deleteMethod operation.\n */\nexport type DirectoryDeleteResponse = DirectoryDeleteHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: DirectoryDeleteHeaders;\n    };\n};\n\n/**\n * Contains response data for the setProperties operation.\n */\nexport type DirectorySetPropertiesResponse = DirectorySetPropertiesHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: DirectorySetPropertiesHeaders;\n    };\n};\n\n/**\n * Contains response data for the setMetadata operation.\n */\nexport type DirectorySetMetadataResponse = DirectorySetMetadataHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: DirectorySetMetadataHeaders;\n    };\n};\n\n/**\n * Contains response data for the listFilesAndDirectoriesSegment operation.\n */\nexport type DirectoryListFilesAndDirectoriesSegmentResponse = ListFilesAndDirectoriesSegmentResponse & DirectoryListFilesAndDirectoriesSegmentHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: DirectoryListFilesAndDirectoriesSegmentHeaders;\n\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ListFilesAndDirectoriesSegmentResponse;\n    };\n};\n\n/**\n * Contains response data for the listHandles operation.\n */\nexport type DirectoryListHandlesResponse = ListHandlesResponse & DirectoryListHandlesHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: DirectoryListHandlesHeaders;\n\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ListHandlesResponse;\n    };\n};\n\n/**\n * Contains response data for the forceCloseHandles operation.\n */\nexport type DirectoryForceCloseHandlesResponse = DirectoryForceCloseHandlesHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: DirectoryForceCloseHandlesHeaders;\n    };\n};\n\n/**\n * Contains response data for the create operation.\n */\nexport type FileCreateResponse = FileCreateHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: FileCreateHeaders;\n    };\n};\n\n/**\n * Contains response data for the download operation.\n */\nexport type FileDownloadResponse = FileDownloadHeaders & {\n  /**\n   * BROWSER ONLY\n   *\n   * The response body as a browser Blob.\n   * Always undefined in node.js.\n   */\n  blobBody?: Promise<Blob>;\n\n  /**\n   * NODEJS ONLY\n   *\n   * The response body as a node.js Readable stream.\n   * Always undefined in the browser.\n   */\n  readableStreamBody?: NodeJS.ReadableStream;\n\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: FileDownloadHeaders;\n    };\n};\n\n/**\n * Contains response data for the getProperties operation.\n */\nexport type FileGetPropertiesResponse = FileGetPropertiesHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: FileGetPropertiesHeaders;\n    };\n};\n\n/**\n * Contains response data for the deleteMethod operation.\n */\nexport type FileDeleteResponse = FileDeleteHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: FileDeleteHeaders;\n    };\n};\n\n/**\n * Contains response data for the setHTTPHeaders operation.\n */\nexport type FileSetHTTPHeadersResponse = FileSetHTTPHeadersHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: FileSetHTTPHeadersHeaders;\n    };\n};\n\n/**\n * Contains response data for the setMetadata operation.\n */\nexport type FileSetMetadataResponse = FileSetMetadataHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: FileSetMetadataHeaders;\n    };\n};\n\n/**\n * Contains response data for the acquireLease operation.\n */\nexport type FileAcquireLeaseResponse = FileAcquireLeaseHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: FileAcquireLeaseHeaders;\n    };\n};\n\n/**\n * Contains response data for the releaseLease operation.\n */\nexport type FileReleaseLeaseResponse = FileReleaseLeaseHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: FileReleaseLeaseHeaders;\n    };\n};\n\n/**\n * Contains response data for the changeLease operation.\n */\nexport type FileChangeLeaseResponse = FileChangeLeaseHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: FileChangeLeaseHeaders;\n    };\n};\n\n/**\n * Contains response data for the breakLease operation.\n */\nexport type FileBreakLeaseResponse = FileBreakLeaseHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: FileBreakLeaseHeaders;\n    };\n};\n\n/**\n * Contains response data for the uploadRange operation.\n */\nexport type FileUploadRangeResponse = FileUploadRangeHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: FileUploadRangeHeaders;\n    };\n};\n\n/**\n * Contains response data for the uploadRangeFromURL operation.\n */\nexport type FileUploadRangeFromURLResponse = FileUploadRangeFromURLHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: FileUploadRangeFromURLHeaders;\n    };\n};\n\n/**\n * Contains response data for the getRangeList operation.\n */\nexport type FileGetRangeListResponse = Array<Range> & FileGetRangeListHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: FileGetRangeListHeaders;\n\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: Range[];\n    };\n};\n\n/**\n * Contains response data for the startCopy operation.\n */\nexport type FileStartCopyResponse = FileStartCopyHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: FileStartCopyHeaders;\n    };\n};\n\n/**\n * Contains response data for the abortCopy operation.\n */\nexport type FileAbortCopyResponse = FileAbortCopyHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: FileAbortCopyHeaders;\n    };\n};\n\n/**\n * Contains response data for the listHandles operation.\n */\nexport type FileListHandlesResponse = ListHandlesResponse & FileListHandlesHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: FileListHandlesHeaders;\n\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ListHandlesResponse;\n    };\n};\n\n/**\n * Contains response data for the forceCloseHandles operation.\n */\nexport type FileForceCloseHandlesResponse = FileForceCloseHandlesHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: FileForceCloseHandlesHeaders;\n    };\n};\n"]}
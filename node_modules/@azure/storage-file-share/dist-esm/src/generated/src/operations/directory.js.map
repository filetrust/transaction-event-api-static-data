{"version":3,"file":"directory.js","sourceRoot":"","sources":["../../../../../src/generated/src/operations/directory.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/directoryMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\n\n/** Class representing a Directory. */\nexport class Directory {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Create a Directory.\n   * @param {StorageClientContext} client Reference to the service client.\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Creates a new directory under the specified share or parent directory.\n   * @param fileAttributes If specified, the provided file attributes shall be set. Default value:\n   * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.\n   * @param fileCreatedOn Creation time for the file/directory. Default value: Now.\n   * @param fileLastWriteOn Last write time for the file/directory. Default value: Now.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DirectoryCreateResponse>\n   */\n  create(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, options?: Models.DirectoryCreateOptionalParams): Promise<Models.DirectoryCreateResponse>;\n  /**\n   * @param fileAttributes If specified, the provided file attributes shall be set. Default value:\n   * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.\n   * @param fileCreatedOn Creation time for the file/directory. Default value: Now.\n   * @param fileLastWriteOn Last write time for the file/directory. Default value: Now.\n   * @param callback The callback\n   */\n  create(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param fileAttributes If specified, the provided file attributes shall be set. Default value:\n   * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.\n   * @param fileCreatedOn Creation time for the file/directory. Default value: Now.\n   * @param fileLastWriteOn Last write time for the file/directory. Default value: Now.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  create(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, options: Models.DirectoryCreateOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  create(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, options?: Models.DirectoryCreateOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.DirectoryCreateResponse> {\n    return this.client.sendOperationRequest(\n      {\n        fileAttributes,\n        fileCreatedOn,\n        fileLastWriteOn,\n        options\n      },\n      createOperationSpec,\n      callback) as Promise<Models.DirectoryCreateResponse>;\n  }\n\n  /**\n   * Returns all system properties for the specified directory, and can also be used to check the\n   * existence of a directory. The data returned does not include the files in the directory or any\n   * subdirectories.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DirectoryGetPropertiesResponse>\n   */\n  getProperties(options?: Models.DirectoryGetPropertiesOptionalParams): Promise<Models.DirectoryGetPropertiesResponse>;\n  /**\n   * @param callback The callback\n   */\n  getProperties(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getProperties(options: Models.DirectoryGetPropertiesOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  getProperties(options?: Models.DirectoryGetPropertiesOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.DirectoryGetPropertiesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getPropertiesOperationSpec,\n      callback) as Promise<Models.DirectoryGetPropertiesResponse>;\n  }\n\n  /**\n   * Removes the specified empty directory. Note that the directory must be empty before it can be\n   * deleted.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DirectoryDeleteResponse>\n   */\n  deleteMethod(options?: Models.DirectoryDeleteMethodOptionalParams): Promise<Models.DirectoryDeleteResponse>;\n  /**\n   * @param callback The callback\n   */\n  deleteMethod(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteMethod(options: Models.DirectoryDeleteMethodOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  deleteMethod(options?: Models.DirectoryDeleteMethodOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.DirectoryDeleteResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      deleteMethodOperationSpec,\n      callback) as Promise<Models.DirectoryDeleteResponse>;\n  }\n\n  /**\n   * Sets properties on the directory.\n   * @param fileAttributes If specified, the provided file attributes shall be set. Default value:\n   * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.\n   * @param fileCreatedOn Creation time for the file/directory. Default value: Now.\n   * @param fileLastWriteOn Last write time for the file/directory. Default value: Now.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DirectorySetPropertiesResponse>\n   */\n  setProperties(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, options?: Models.DirectorySetPropertiesOptionalParams): Promise<Models.DirectorySetPropertiesResponse>;\n  /**\n   * @param fileAttributes If specified, the provided file attributes shall be set. Default value:\n   * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.\n   * @param fileCreatedOn Creation time for the file/directory. Default value: Now.\n   * @param fileLastWriteOn Last write time for the file/directory. Default value: Now.\n   * @param callback The callback\n   */\n  setProperties(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param fileAttributes If specified, the provided file attributes shall be set. Default value:\n   * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.\n   * @param fileCreatedOn Creation time for the file/directory. Default value: Now.\n   * @param fileLastWriteOn Last write time for the file/directory. Default value: Now.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setProperties(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, options: Models.DirectorySetPropertiesOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  setProperties(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, options?: Models.DirectorySetPropertiesOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.DirectorySetPropertiesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        fileAttributes,\n        fileCreatedOn,\n        fileLastWriteOn,\n        options\n      },\n      setPropertiesOperationSpec,\n      callback) as Promise<Models.DirectorySetPropertiesResponse>;\n  }\n\n  /**\n   * Updates user defined metadata for the specified directory.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DirectorySetMetadataResponse>\n   */\n  setMetadata(options?: Models.DirectorySetMetadataOptionalParams): Promise<Models.DirectorySetMetadataResponse>;\n  /**\n   * @param callback The callback\n   */\n  setMetadata(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setMetadata(options: Models.DirectorySetMetadataOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  setMetadata(options?: Models.DirectorySetMetadataOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.DirectorySetMetadataResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      setMetadataOperationSpec,\n      callback) as Promise<Models.DirectorySetMetadataResponse>;\n  }\n\n  /**\n   * Returns a list of files or directories under the specified share or directory. It lists the\n   * contents only for a single level of the directory hierarchy.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DirectoryListFilesAndDirectoriesSegmentResponse>\n   */\n  listFilesAndDirectoriesSegment(options?: Models.DirectoryListFilesAndDirectoriesSegmentOptionalParams): Promise<Models.DirectoryListFilesAndDirectoriesSegmentResponse>;\n  /**\n   * @param callback The callback\n   */\n  listFilesAndDirectoriesSegment(callback: coreHttp.ServiceCallback<Models.ListFilesAndDirectoriesSegmentResponse>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  listFilesAndDirectoriesSegment(options: Models.DirectoryListFilesAndDirectoriesSegmentOptionalParams, callback: coreHttp.ServiceCallback<Models.ListFilesAndDirectoriesSegmentResponse>): void;\n  listFilesAndDirectoriesSegment(options?: Models.DirectoryListFilesAndDirectoriesSegmentOptionalParams | coreHttp.ServiceCallback<Models.ListFilesAndDirectoriesSegmentResponse>, callback?: coreHttp.ServiceCallback<Models.ListFilesAndDirectoriesSegmentResponse>): Promise<Models.DirectoryListFilesAndDirectoriesSegmentResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      listFilesAndDirectoriesSegmentOperationSpec,\n      callback) as Promise<Models.DirectoryListFilesAndDirectoriesSegmentResponse>;\n  }\n\n  /**\n   * Lists handles for directory.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DirectoryListHandlesResponse>\n   */\n  listHandles(options?: Models.DirectoryListHandlesOptionalParams): Promise<Models.DirectoryListHandlesResponse>;\n  /**\n   * @param callback The callback\n   */\n  listHandles(callback: coreHttp.ServiceCallback<Models.ListHandlesResponse>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  listHandles(options: Models.DirectoryListHandlesOptionalParams, callback: coreHttp.ServiceCallback<Models.ListHandlesResponse>): void;\n  listHandles(options?: Models.DirectoryListHandlesOptionalParams | coreHttp.ServiceCallback<Models.ListHandlesResponse>, callback?: coreHttp.ServiceCallback<Models.ListHandlesResponse>): Promise<Models.DirectoryListHandlesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      listHandlesOperationSpec,\n      callback) as Promise<Models.DirectoryListHandlesResponse>;\n  }\n\n  /**\n   * Closes all handles open for given directory.\n   * @param handleId Specifies handle ID opened on the file or directory to be closed. Asterisk (‘*’)\n   * is a wildcard that specifies all handles.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DirectoryForceCloseHandlesResponse>\n   */\n  forceCloseHandles(handleId: string, options?: Models.DirectoryForceCloseHandlesOptionalParams): Promise<Models.DirectoryForceCloseHandlesResponse>;\n  /**\n   * @param handleId Specifies handle ID opened on the file or directory to be closed. Asterisk (‘*’)\n   * is a wildcard that specifies all handles.\n   * @param callback The callback\n   */\n  forceCloseHandles(handleId: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param handleId Specifies handle ID opened on the file or directory to be closed. Asterisk (‘*’)\n   * is a wildcard that specifies all handles.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  forceCloseHandles(handleId: string, options: Models.DirectoryForceCloseHandlesOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  forceCloseHandles(handleId: string, options?: Models.DirectoryForceCloseHandlesOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.DirectoryForceCloseHandlesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        handleId,\n        options\n      },\n      forceCloseHandlesOperationSpec,\n      callback) as Promise<Models.DirectoryForceCloseHandlesResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers, true);\nconst createOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}/{directory}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2\n  ],\n  headerParameters: [\n    Parameters.metadata,\n    Parameters.version,\n    Parameters.filePermission,\n    Parameters.filePermissionKey1,\n    Parameters.fileAttributes0,\n    Parameters.fileCreatedOn,\n    Parameters.fileLastWriteOn\n  ],\n  responses: {\n    201: {\n      headersMapper: Mappers.DirectoryCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.DirectoryCreateHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getPropertiesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{shareName}/{directory}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.shareSnapshot,\n    Parameters.timeoutInSeconds,\n    Parameters.restype2\n  ],\n  headerParameters: [\n    Parameters.version\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.DirectoryGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.DirectoryGetPropertiesHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst deleteMethodOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"{shareName}/{directory}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2\n  ],\n  headerParameters: [\n    Parameters.version\n  ],\n  responses: {\n    202: {\n      headersMapper: Mappers.DirectoryDeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.DirectoryDeleteHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst setPropertiesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}/{directory}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp0\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.filePermission,\n    Parameters.filePermissionKey1,\n    Parameters.fileAttributes0,\n    Parameters.fileCreatedOn,\n    Parameters.fileLastWriteOn\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.DirectorySetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.DirectorySetPropertiesHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst setMetadataOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}/{directory}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp4\n  ],\n  headerParameters: [\n    Parameters.metadata,\n    Parameters.version\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.DirectorySetMetadataHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.DirectorySetMetadataHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst listFilesAndDirectoriesSegmentOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{shareName}/{directory}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.prefix,\n    Parameters.shareSnapshot,\n    Parameters.marker,\n    Parameters.maxResults,\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp1\n  ],\n  headerParameters: [\n    Parameters.version\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListFilesAndDirectoriesSegmentResponse,\n      headersMapper: Mappers.DirectoryListFilesAndDirectoriesSegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.DirectoryListFilesAndDirectoriesSegmentHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst listHandlesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{shareName}/{directory}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.marker,\n    Parameters.maxResults,\n    Parameters.timeoutInSeconds,\n    Parameters.shareSnapshot,\n    Parameters.comp8\n  ],\n  headerParameters: [\n    Parameters.recursive,\n    Parameters.version\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListHandlesResponse,\n      headersMapper: Mappers.DirectoryListHandlesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.DirectoryListHandlesHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst forceCloseHandlesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}/{directory}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.marker,\n    Parameters.shareSnapshot,\n    Parameters.comp9\n  ],\n  headerParameters: [\n    Parameters.handleId,\n    Parameters.recursive,\n    Parameters.version\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.DirectoryForceCloseHandlesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.DirectoryForceCloseHandlesHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n"]}
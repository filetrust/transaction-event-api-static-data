{"version":3,"file":"file.js","sourceRoot":"","sources":["../../../../../src/generated/src/operations/file.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/fileMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\n\n/** Class representing a File. */\nexport class File {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Create a File.\n   * @param {StorageClientContext} client Reference to the service client.\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Creates a new file or replaces a file. Note it only initializes the file with no content.\n   * @param fileContentLength Specifies the maximum size for the file, up to 1 TB.\n   * @param fileAttributes If specified, the provided file attributes shall be set. Default value:\n   * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.\n   * @param fileCreatedOn Creation time for the file/directory. Default value: Now.\n   * @param fileLastWriteOn Last write time for the file/directory. Default value: Now.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FileCreateResponse>\n   */\n  create(fileContentLength: number, fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, options?: Models.FileCreateOptionalParams): Promise<Models.FileCreateResponse>;\n  /**\n   * @param fileContentLength Specifies the maximum size for the file, up to 1 TB.\n   * @param fileAttributes If specified, the provided file attributes shall be set. Default value:\n   * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.\n   * @param fileCreatedOn Creation time for the file/directory. Default value: Now.\n   * @param fileLastWriteOn Last write time for the file/directory. Default value: Now.\n   * @param callback The callback\n   */\n  create(fileContentLength: number, fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param fileContentLength Specifies the maximum size for the file, up to 1 TB.\n   * @param fileAttributes If specified, the provided file attributes shall be set. Default value:\n   * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.\n   * @param fileCreatedOn Creation time for the file/directory. Default value: Now.\n   * @param fileLastWriteOn Last write time for the file/directory. Default value: Now.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  create(fileContentLength: number, fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, options: Models.FileCreateOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  create(fileContentLength: number, fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, options?: Models.FileCreateOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.FileCreateResponse> {\n    return this.client.sendOperationRequest(\n      {\n        fileContentLength,\n        fileAttributes,\n        fileCreatedOn,\n        fileLastWriteOn,\n        options\n      },\n      createOperationSpec,\n      callback) as Promise<Models.FileCreateResponse>;\n  }\n\n  /**\n   * Reads or downloads a file from the system, including its metadata and properties.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FileDownloadResponse>\n   */\n  download(options?: Models.FileDownloadOptionalParams): Promise<Models.FileDownloadResponse>;\n  /**\n   * @param callback The callback\n   */\n  download(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  download(options: Models.FileDownloadOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  download(options?: Models.FileDownloadOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.FileDownloadResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      downloadOperationSpec,\n      callback) as Promise<Models.FileDownloadResponse>;\n  }\n\n  /**\n   * Returns all user-defined metadata, standard HTTP properties, and system properties for the file.\n   * It does not return the content of the file.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FileGetPropertiesResponse>\n   */\n  getProperties(options?: Models.FileGetPropertiesOptionalParams): Promise<Models.FileGetPropertiesResponse>;\n  /**\n   * @param callback The callback\n   */\n  getProperties(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getProperties(options: Models.FileGetPropertiesOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  getProperties(options?: Models.FileGetPropertiesOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.FileGetPropertiesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getPropertiesOperationSpec,\n      callback) as Promise<Models.FileGetPropertiesResponse>;\n  }\n\n  /**\n   * removes the file from the storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FileDeleteResponse>\n   */\n  deleteMethod(options?: Models.FileDeleteMethodOptionalParams): Promise<Models.FileDeleteResponse>;\n  /**\n   * @param callback The callback\n   */\n  deleteMethod(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteMethod(options: Models.FileDeleteMethodOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  deleteMethod(options?: Models.FileDeleteMethodOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.FileDeleteResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      deleteMethodOperationSpec,\n      callback) as Promise<Models.FileDeleteResponse>;\n  }\n\n  /**\n   * Sets HTTP headers on the file.\n   * @param fileAttributes If specified, the provided file attributes shall be set. Default value:\n   * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.\n   * @param fileCreatedOn Creation time for the file/directory. Default value: Now.\n   * @param fileLastWriteOn Last write time for the file/directory. Default value: Now.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FileSetHTTPHeadersResponse>\n   */\n  setHTTPHeaders(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, options?: Models.FileSetHTTPHeadersOptionalParams): Promise<Models.FileSetHTTPHeadersResponse>;\n  /**\n   * @param fileAttributes If specified, the provided file attributes shall be set. Default value:\n   * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.\n   * @param fileCreatedOn Creation time for the file/directory. Default value: Now.\n   * @param fileLastWriteOn Last write time for the file/directory. Default value: Now.\n   * @param callback The callback\n   */\n  setHTTPHeaders(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param fileAttributes If specified, the provided file attributes shall be set. Default value:\n   * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.\n   * @param fileCreatedOn Creation time for the file/directory. Default value: Now.\n   * @param fileLastWriteOn Last write time for the file/directory. Default value: Now.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setHTTPHeaders(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, options: Models.FileSetHTTPHeadersOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  setHTTPHeaders(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, options?: Models.FileSetHTTPHeadersOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.FileSetHTTPHeadersResponse> {\n    return this.client.sendOperationRequest(\n      {\n        fileAttributes,\n        fileCreatedOn,\n        fileLastWriteOn,\n        options\n      },\n      setHTTPHeadersOperationSpec,\n      callback) as Promise<Models.FileSetHTTPHeadersResponse>;\n  }\n\n  /**\n   * Updates user-defined metadata for the specified file.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FileSetMetadataResponse>\n   */\n  setMetadata(options?: Models.FileSetMetadataOptionalParams): Promise<Models.FileSetMetadataResponse>;\n  /**\n   * @param callback The callback\n   */\n  setMetadata(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setMetadata(options: Models.FileSetMetadataOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  setMetadata(options?: Models.FileSetMetadataOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.FileSetMetadataResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      setMetadataOperationSpec,\n      callback) as Promise<Models.FileSetMetadataResponse>;\n  }\n\n  /**\n   * [Update] The Lease File operation establishes and manages a lock on a file for write and delete\n   * operations\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FileAcquireLeaseResponse>\n   */\n  acquireLease(options?: Models.FileAcquireLeaseOptionalParams): Promise<Models.FileAcquireLeaseResponse>;\n  /**\n   * @param callback The callback\n   */\n  acquireLease(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  acquireLease(options: Models.FileAcquireLeaseOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  acquireLease(options?: Models.FileAcquireLeaseOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.FileAcquireLeaseResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      acquireLeaseOperationSpec,\n      callback) as Promise<Models.FileAcquireLeaseResponse>;\n  }\n\n  /**\n   * [Update] The Lease File operation establishes and manages a lock on a file for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FileReleaseLeaseResponse>\n   */\n  releaseLease(leaseId: string, options?: Models.FileReleaseLeaseOptionalParams): Promise<Models.FileReleaseLeaseResponse>;\n  /**\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param callback The callback\n   */\n  releaseLease(leaseId: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  releaseLease(leaseId: string, options: Models.FileReleaseLeaseOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  releaseLease(leaseId: string, options?: Models.FileReleaseLeaseOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.FileReleaseLeaseResponse> {\n    return this.client.sendOperationRequest(\n      {\n        leaseId,\n        options\n      },\n      releaseLeaseOperationSpec,\n      callback) as Promise<Models.FileReleaseLeaseResponse>;\n  }\n\n  /**\n   * [Update] The Lease File operation establishes and manages a lock on a file for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FileChangeLeaseResponse>\n   */\n  changeLease(leaseId: string, options?: Models.FileChangeLeaseOptionalParams): Promise<Models.FileChangeLeaseResponse>;\n  /**\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param callback The callback\n   */\n  changeLease(leaseId: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  changeLease(leaseId: string, options: Models.FileChangeLeaseOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  changeLease(leaseId: string, options?: Models.FileChangeLeaseOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.FileChangeLeaseResponse> {\n    return this.client.sendOperationRequest(\n      {\n        leaseId,\n        options\n      },\n      changeLeaseOperationSpec,\n      callback) as Promise<Models.FileChangeLeaseResponse>;\n  }\n\n  /**\n   * [Update] The Lease File operation establishes and manages a lock on a file for write and delete\n   * operations\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FileBreakLeaseResponse>\n   */\n  breakLease(options?: Models.FileBreakLeaseOptionalParams): Promise<Models.FileBreakLeaseResponse>;\n  /**\n   * @param callback The callback\n   */\n  breakLease(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  breakLease(options: Models.FileBreakLeaseOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  breakLease(options?: Models.FileBreakLeaseOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.FileBreakLeaseResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      breakLeaseOperationSpec,\n      callback) as Promise<Models.FileBreakLeaseResponse>;\n  }\n\n  /**\n   * Upload a range of bytes to a file.\n   * @param range Specifies the range of bytes to be written. Both the start and end of the range\n   * must be specified. For an update operation, the range can be up to 4 MB in size. For a clear\n   * operation, the range can be up to the value of the file's full size. The File service accepts\n   * only a single byte range for the Range and 'x-ms-range' headers, and the byte range must be\n   * specified in the following format: bytes=startByte-endByte.\n   * @param fileRangeWrite Specify one of the following options: - Update: Writes the bytes specified\n   * by the request body into the specified range. The Range and Content-Length headers must match to\n   * perform the update. - Clear: Clears the specified range and releases the space used in storage\n   * for that range. To clear a range, set the Content-Length header to zero, and set the Range\n   * header to a value that indicates the range to clear, up to maximum file size. Possible values\n   * include: 'update', 'clear'\n   * @param contentLength Specifies the number of bytes being transmitted in the request body. When\n   * the x-ms-write header is set to clear, the value of this header must be set to zero.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FileUploadRangeResponse>\n   */\n  uploadRange(range: string, fileRangeWrite: Models.FileRangeWriteType, contentLength: number, options?: Models.FileUploadRangeOptionalParams): Promise<Models.FileUploadRangeResponse>;\n  /**\n   * @param range Specifies the range of bytes to be written. Both the start and end of the range\n   * must be specified. For an update operation, the range can be up to 4 MB in size. For a clear\n   * operation, the range can be up to the value of the file's full size. The File service accepts\n   * only a single byte range for the Range and 'x-ms-range' headers, and the byte range must be\n   * specified in the following format: bytes=startByte-endByte.\n   * @param fileRangeWrite Specify one of the following options: - Update: Writes the bytes specified\n   * by the request body into the specified range. The Range and Content-Length headers must match to\n   * perform the update. - Clear: Clears the specified range and releases the space used in storage\n   * for that range. To clear a range, set the Content-Length header to zero, and set the Range\n   * header to a value that indicates the range to clear, up to maximum file size. Possible values\n   * include: 'update', 'clear'\n   * @param contentLength Specifies the number of bytes being transmitted in the request body. When\n   * the x-ms-write header is set to clear, the value of this header must be set to zero.\n   * @param callback The callback\n   */\n  uploadRange(range: string, fileRangeWrite: Models.FileRangeWriteType, contentLength: number, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param range Specifies the range of bytes to be written. Both the start and end of the range\n   * must be specified. For an update operation, the range can be up to 4 MB in size. For a clear\n   * operation, the range can be up to the value of the file's full size. The File service accepts\n   * only a single byte range for the Range and 'x-ms-range' headers, and the byte range must be\n   * specified in the following format: bytes=startByte-endByte.\n   * @param fileRangeWrite Specify one of the following options: - Update: Writes the bytes specified\n   * by the request body into the specified range. The Range and Content-Length headers must match to\n   * perform the update. - Clear: Clears the specified range and releases the space used in storage\n   * for that range. To clear a range, set the Content-Length header to zero, and set the Range\n   * header to a value that indicates the range to clear, up to maximum file size. Possible values\n   * include: 'update', 'clear'\n   * @param contentLength Specifies the number of bytes being transmitted in the request body. When\n   * the x-ms-write header is set to clear, the value of this header must be set to zero.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  uploadRange(range: string, fileRangeWrite: Models.FileRangeWriteType, contentLength: number, options: Models.FileUploadRangeOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  uploadRange(range: string, fileRangeWrite: Models.FileRangeWriteType, contentLength: number, options?: Models.FileUploadRangeOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.FileUploadRangeResponse> {\n    return this.client.sendOperationRequest(\n      {\n        range,\n        fileRangeWrite,\n        contentLength,\n        options\n      },\n      uploadRangeOperationSpec,\n      callback) as Promise<Models.FileUploadRangeResponse>;\n  }\n\n  /**\n   * Upload a range of bytes to a file where the contents are read from a URL.\n   * @param range Writes data to the specified byte range in the file.\n   * @param copySource Specifies the URL of the source file or blob, up to 2 KB in length. To copy a\n   * file to another file within the same storage account, you may use Shared Key to authenticate the\n   * source file. If you are copying a file from another storage account, or if you are copying a\n   * blob from the same storage account or another storage account, then you must authenticate the\n   * source file or blob using a shared access signature. If the source is a public blob, no\n   * authentication is required to perform the copy operation. A file in a share snapshot can also be\n   * specified as a copy source.\n   * @param contentLength Specifies the number of bytes being transmitted in the request body. When\n   * the x-ms-write header is set to clear, the value of this header must be set to zero.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FileUploadRangeFromURLResponse>\n   */\n  uploadRangeFromURL(range: string, copySource: string, contentLength: number, options?: Models.FileUploadRangeFromURLOptionalParams): Promise<Models.FileUploadRangeFromURLResponse>;\n  /**\n   * @param range Writes data to the specified byte range in the file.\n   * @param copySource Specifies the URL of the source file or blob, up to 2 KB in length. To copy a\n   * file to another file within the same storage account, you may use Shared Key to authenticate the\n   * source file. If you are copying a file from another storage account, or if you are copying a\n   * blob from the same storage account or another storage account, then you must authenticate the\n   * source file or blob using a shared access signature. If the source is a public blob, no\n   * authentication is required to perform the copy operation. A file in a share snapshot can also be\n   * specified as a copy source.\n   * @param contentLength Specifies the number of bytes being transmitted in the request body. When\n   * the x-ms-write header is set to clear, the value of this header must be set to zero.\n   * @param callback The callback\n   */\n  uploadRangeFromURL(range: string, copySource: string, contentLength: number, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param range Writes data to the specified byte range in the file.\n   * @param copySource Specifies the URL of the source file or blob, up to 2 KB in length. To copy a\n   * file to another file within the same storage account, you may use Shared Key to authenticate the\n   * source file. If you are copying a file from another storage account, or if you are copying a\n   * blob from the same storage account or another storage account, then you must authenticate the\n   * source file or blob using a shared access signature. If the source is a public blob, no\n   * authentication is required to perform the copy operation. A file in a share snapshot can also be\n   * specified as a copy source.\n   * @param contentLength Specifies the number of bytes being transmitted in the request body. When\n   * the x-ms-write header is set to clear, the value of this header must be set to zero.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  uploadRangeFromURL(range: string, copySource: string, contentLength: number, options: Models.FileUploadRangeFromURLOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  uploadRangeFromURL(range: string, copySource: string, contentLength: number, options?: Models.FileUploadRangeFromURLOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.FileUploadRangeFromURLResponse> {\n    return this.client.sendOperationRequest(\n      {\n        range,\n        copySource,\n        contentLength,\n        options\n      },\n      uploadRangeFromURLOperationSpec,\n      callback) as Promise<Models.FileUploadRangeFromURLResponse>;\n  }\n\n  /**\n   * Returns the list of valid ranges for a file.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FileGetRangeListResponse>\n   */\n  getRangeList(options?: Models.FileGetRangeListOptionalParams): Promise<Models.FileGetRangeListResponse>;\n  /**\n   * @param callback The callback\n   */\n  getRangeList(callback: coreHttp.ServiceCallback<Models.Range[]>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getRangeList(options: Models.FileGetRangeListOptionalParams, callback: coreHttp.ServiceCallback<Models.Range[]>): void;\n  getRangeList(options?: Models.FileGetRangeListOptionalParams | coreHttp.ServiceCallback<Models.Range[]>, callback?: coreHttp.ServiceCallback<Models.Range[]>): Promise<Models.FileGetRangeListResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getRangeListOperationSpec,\n      callback) as Promise<Models.FileGetRangeListResponse>;\n  }\n\n  /**\n   * Copies a blob or file to a destination file within the storage account.\n   * @param copySource Specifies the URL of the source file or blob, up to 2 KB in length. To copy a\n   * file to another file within the same storage account, you may use Shared Key to authenticate the\n   * source file. If you are copying a file from another storage account, or if you are copying a\n   * blob from the same storage account or another storage account, then you must authenticate the\n   * source file or blob using a shared access signature. If the source is a public blob, no\n   * authentication is required to perform the copy operation. A file in a share snapshot can also be\n   * specified as a copy source.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FileStartCopyResponse>\n   */\n  startCopy(copySource: string, options?: Models.FileStartCopyOptionalParams): Promise<Models.FileStartCopyResponse>;\n  /**\n   * @param copySource Specifies the URL of the source file or blob, up to 2 KB in length. To copy a\n   * file to another file within the same storage account, you may use Shared Key to authenticate the\n   * source file. If you are copying a file from another storage account, or if you are copying a\n   * blob from the same storage account or another storage account, then you must authenticate the\n   * source file or blob using a shared access signature. If the source is a public blob, no\n   * authentication is required to perform the copy operation. A file in a share snapshot can also be\n   * specified as a copy source.\n   * @param callback The callback\n   */\n  startCopy(copySource: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param copySource Specifies the URL of the source file or blob, up to 2 KB in length. To copy a\n   * file to another file within the same storage account, you may use Shared Key to authenticate the\n   * source file. If you are copying a file from another storage account, or if you are copying a\n   * blob from the same storage account or another storage account, then you must authenticate the\n   * source file or blob using a shared access signature. If the source is a public blob, no\n   * authentication is required to perform the copy operation. A file in a share snapshot can also be\n   * specified as a copy source.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  startCopy(copySource: string, options: Models.FileStartCopyOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  startCopy(copySource: string, options?: Models.FileStartCopyOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.FileStartCopyResponse> {\n    return this.client.sendOperationRequest(\n      {\n        copySource,\n        options\n      },\n      startCopyOperationSpec,\n      callback) as Promise<Models.FileStartCopyResponse>;\n  }\n\n  /**\n   * Aborts a pending Copy File operation, and leaves a destination file with zero length and full\n   * metadata.\n   * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy File\n   * operation.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FileAbortCopyResponse>\n   */\n  abortCopy(copyId: string, options?: Models.FileAbortCopyOptionalParams): Promise<Models.FileAbortCopyResponse>;\n  /**\n   * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy File\n   * operation.\n   * @param callback The callback\n   */\n  abortCopy(copyId: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy File\n   * operation.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  abortCopy(copyId: string, options: Models.FileAbortCopyOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  abortCopy(copyId: string, options?: Models.FileAbortCopyOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.FileAbortCopyResponse> {\n    return this.client.sendOperationRequest(\n      {\n        copyId,\n        options\n      },\n      abortCopyOperationSpec,\n      callback) as Promise<Models.FileAbortCopyResponse>;\n  }\n\n  /**\n   * Lists handles for file\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FileListHandlesResponse>\n   */\n  listHandles(options?: Models.FileListHandlesOptionalParams): Promise<Models.FileListHandlesResponse>;\n  /**\n   * @param callback The callback\n   */\n  listHandles(callback: coreHttp.ServiceCallback<Models.ListHandlesResponse>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  listHandles(options: Models.FileListHandlesOptionalParams, callback: coreHttp.ServiceCallback<Models.ListHandlesResponse>): void;\n  listHandles(options?: Models.FileListHandlesOptionalParams | coreHttp.ServiceCallback<Models.ListHandlesResponse>, callback?: coreHttp.ServiceCallback<Models.ListHandlesResponse>): Promise<Models.FileListHandlesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      listHandlesOperationSpec,\n      callback) as Promise<Models.FileListHandlesResponse>;\n  }\n\n  /**\n   * Closes all handles open for given file\n   * @param handleId Specifies handle ID opened on the file or directory to be closed. Asterisk (‘*’)\n   * is a wildcard that specifies all handles.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FileForceCloseHandlesResponse>\n   */\n  forceCloseHandles(handleId: string, options?: Models.FileForceCloseHandlesOptionalParams): Promise<Models.FileForceCloseHandlesResponse>;\n  /**\n   * @param handleId Specifies handle ID opened on the file or directory to be closed. Asterisk (‘*’)\n   * is a wildcard that specifies all handles.\n   * @param callback The callback\n   */\n  forceCloseHandles(handleId: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param handleId Specifies handle ID opened on the file or directory to be closed. Asterisk (‘*’)\n   * is a wildcard that specifies all handles.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  forceCloseHandles(handleId: string, options: Models.FileForceCloseHandlesOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  forceCloseHandles(handleId: string, options?: Models.FileForceCloseHandlesOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.FileForceCloseHandlesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        handleId,\n        options\n      },\n      forceCloseHandlesOperationSpec,\n      callback) as Promise<Models.FileForceCloseHandlesResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers, true);\nconst createOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}/{directory}/{fileName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.fileContentLength0,\n    Parameters.fileTypeConstant,\n    Parameters.metadata,\n    Parameters.filePermission,\n    Parameters.filePermissionKey1,\n    Parameters.fileAttributes0,\n    Parameters.fileCreatedOn,\n    Parameters.fileLastWriteOn,\n    Parameters.fileContentType,\n    Parameters.fileContentEncoding,\n    Parameters.fileContentLanguage,\n    Parameters.fileCacheControl,\n    Parameters.fileContentMD5,\n    Parameters.fileContentDisposition,\n    Parameters.leaseId0\n  ],\n  responses: {\n    201: {\n      headersMapper: Mappers.FileCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileCreateHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst downloadOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{shareName}/{directory}/{fileName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.range0,\n    Parameters.rangeGetContentMD5,\n    Parameters.leaseId0\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Stream\"\n        }\n      },\n      headersMapper: Mappers.FileDownloadHeaders\n    },\n    206: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Stream\"\n        }\n      },\n      headersMapper: Mappers.FileDownloadHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileDownloadHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getPropertiesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"HEAD\",\n  path: \"{shareName}/{directory}/{fileName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.shareSnapshot,\n    Parameters.timeoutInSeconds\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.leaseId0\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.FileGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileGetPropertiesHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst deleteMethodOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"{shareName}/{directory}/{fileName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.leaseId0\n  ],\n  responses: {\n    202: {\n      headersMapper: Mappers.FileDeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileDeleteHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst setHTTPHeadersOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}/{directory}/{fileName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp0\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.fileContentLength1,\n    Parameters.filePermission,\n    Parameters.filePermissionKey1,\n    Parameters.fileAttributes0,\n    Parameters.fileCreatedOn,\n    Parameters.fileLastWriteOn,\n    Parameters.fileContentType,\n    Parameters.fileContentEncoding,\n    Parameters.fileContentLanguage,\n    Parameters.fileCacheControl,\n    Parameters.fileContentMD5,\n    Parameters.fileContentDisposition,\n    Parameters.leaseId0\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.FileSetHTTPHeadersHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileSetHTTPHeadersHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst setMetadataOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}/{directory}/{fileName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp4\n  ],\n  headerParameters: [\n    Parameters.metadata,\n    Parameters.version,\n    Parameters.leaseId0\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.FileSetMetadataHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileSetMetadataHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst acquireLeaseOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}/{directory}/{fileName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp10\n  ],\n  headerParameters: [\n    Parameters.duration,\n    Parameters.proposedLeaseId,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.action0\n  ],\n  responses: {\n    201: {\n      headersMapper: Mappers.FileAcquireLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileAcquireLeaseHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst releaseLeaseOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}/{directory}/{fileName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp10\n  ],\n  headerParameters: [\n    Parameters.leaseId1,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.action1\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.FileReleaseLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileReleaseLeaseHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst changeLeaseOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}/{directory}/{fileName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp10\n  ],\n  headerParameters: [\n    Parameters.leaseId1,\n    Parameters.proposedLeaseId,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.action2\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.FileChangeLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileChangeLeaseHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst breakLeaseOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}/{directory}/{fileName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp10\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.action3,\n    Parameters.leaseId0\n  ],\n  responses: {\n    202: {\n      headersMapper: Mappers.FileBreakLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileBreakLeaseHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst uploadRangeOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}/{directory}/{fileName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp11\n  ],\n  headerParameters: [\n    Parameters.range1,\n    Parameters.fileRangeWrite,\n    Parameters.contentLength,\n    Parameters.contentMD5,\n    Parameters.version,\n    Parameters.leaseId0\n  ],\n  requestBody: {\n    parameterPath: [\n      \"options\",\n      \"body\"\n    ],\n    mapper: {\n      serializedName: \"body\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    201: {\n      headersMapper: Mappers.FileUploadRangeHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileUploadRangeHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst uploadRangeFromURLOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}/{directory}/{fileName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp11\n  ],\n  headerParameters: [\n    Parameters.range1,\n    Parameters.copySource,\n    Parameters.sourceRange,\n    Parameters.fileRangeWriteFromUrl,\n    Parameters.contentLength,\n    Parameters.sourceContentCrc64,\n    Parameters.version,\n    Parameters.sourceIfMatchCrc64,\n    Parameters.sourceIfNoneMatchCrc64,\n    Parameters.leaseId0\n  ],\n  responses: {\n    201: {\n      headersMapper: Mappers.FileUploadRangeFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileUploadRangeFromURLHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getRangeListOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{shareName}/{directory}/{fileName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.shareSnapshot,\n    Parameters.timeoutInSeconds,\n    Parameters.comp12\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.range0,\n    Parameters.leaseId0\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        xmlElementName: \"Range\",\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Range\"\n            }\n          }\n        }\n      },\n      headersMapper: Mappers.FileGetRangeListHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileGetRangeListHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst startCopyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}/{directory}/{fileName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.metadata,\n    Parameters.copySource,\n    Parameters.filePermission,\n    Parameters.filePermissionKey1,\n    Parameters.filePermissionCopyMode,\n    Parameters.ignoreReadOnly,\n    Parameters.fileAttributes1,\n    Parameters.fileCreationTime,\n    Parameters.fileLastWriteTime,\n    Parameters.setArchiveAttribute,\n    Parameters.leaseId0\n  ],\n  responses: {\n    202: {\n      headersMapper: Mappers.FileStartCopyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileStartCopyHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst abortCopyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}/{directory}/{fileName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.copyId,\n    Parameters.timeoutInSeconds,\n    Parameters.comp13\n  ],\n  headerParameters: [\n    Parameters.copyActionAbortConstant,\n    Parameters.version,\n    Parameters.leaseId0\n  ],\n  responses: {\n    204: {\n      headersMapper: Mappers.FileAbortCopyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileAbortCopyHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst listHandlesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{shareName}/{directory}/{fileName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.marker,\n    Parameters.maxResults,\n    Parameters.timeoutInSeconds,\n    Parameters.shareSnapshot,\n    Parameters.comp8\n  ],\n  headerParameters: [\n    Parameters.version\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListHandlesResponse,\n      headersMapper: Mappers.FileListHandlesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileListHandlesHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst forceCloseHandlesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}/{directory}/{fileName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.marker,\n    Parameters.shareSnapshot,\n    Parameters.comp9\n  ],\n  headerParameters: [\n    Parameters.handleId,\n    Parameters.version\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.FileForceCloseHandlesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileForceCloseHandlesHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n"]}
{"version":3,"file":"storageClient.js","sourceRoot":"","sources":["../../../../src/generated/src/storageClient.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG;;AAGH,OAAO,KAAK,MAAM,MAAM,UAAU,CAAC;AACnC,OAAO,KAAK,OAAO,MAAM,kBAAkB,CAAC;AAC5C,OAAO,KAAK,UAAU,MAAM,cAAc,CAAC;AAC3C,OAAO,EAAE,oBAAoB,EAAE,MAAM,wBAAwB,CAAC;AAE9D;IAA4B,iCAAoB;IAO9C;;;;;;OAMG;IACH,uBAAY,OAAe,EAAE,GAAW,EAAE,OAAuC;QAAjF,YACE,kBAAM,OAAO,EAAE,GAAG,EAAE,OAAO,CAAC,SAK7B;QAJC,KAAI,CAAC,OAAO,GAAG,IAAI,UAAU,CAAC,OAAO,CAAC,KAAI,CAAC,CAAC;QAC5C,KAAI,CAAC,KAAK,GAAG,IAAI,UAAU,CAAC,KAAK,CAAC,KAAI,CAAC,CAAC;QACxC,KAAI,CAAC,SAAS,GAAG,IAAI,UAAU,CAAC,SAAS,CAAC,KAAI,CAAC,CAAC;QAChD,KAAI,CAAC,IAAI,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;IACxC,CAAC;IACH,oBAAC;AAAD,CAAC,AArBD,CAA4B,oBAAoB,GAqB/C;AAED,2BAA2B;AAE3B,OAAO,EACL,aAAa,EACb,oBAAoB,EACpB,MAAM,IAAI,aAAa,EACvB,OAAO,IAAI,cAAc,EAC1B,CAAC;AACF,cAAc,cAAc,CAAC","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Models from \"./models\";\nimport * as Mappers from \"./models/mappers\";\nimport * as operations from \"./operations\";\nimport { StorageClientContext } from \"./storageClientContext\";\n\nclass StorageClient extends StorageClientContext {\n  // Operation groups\n  service: operations.Service;\n  share: operations.Share;\n  directory: operations.Directory;\n  file: operations.File;\n\n  /**\n   * Initializes a new instance of the StorageClient class.\n   * @param version Specifies the version of the operation to use for this request.\n   * @param url The URL of the service account, share, directory or file that is the target of the\n   * desired operation.\n   * @param [options] The parameter options\n   */\n  constructor(version: string, url: string, options?: coreHttp.ServiceClientOptions) {\n    super(version, url, options);\n    this.service = new operations.Service(this);\n    this.share = new operations.Share(this);\n    this.directory = new operations.Directory(this);\n    this.file = new operations.File(this);\n  }\n}\n\n// Operation Specifications\n\nexport {\n  StorageClient,\n  StorageClientContext,\n  Models as StorageModels,\n  Mappers as StorageMappers\n};\nexport * from \"./operations\";\n"]}
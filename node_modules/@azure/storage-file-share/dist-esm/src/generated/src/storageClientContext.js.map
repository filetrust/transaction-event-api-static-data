{"version":3,"file":"storageClientContext.js","sourceRoot":"","sources":["../../../../src/generated/src/storageClientContext.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG;;AAEH,OAAO,KAAK,QAAQ,MAAM,kBAAkB,CAAC;AAE7C,IAAM,WAAW,GAAG,0BAA0B,CAAC;AAC/C,IAAM,cAAc,GAAG,QAAQ,CAAC;AAEhC;IAA0C,wCAAsB;IAK9D;;;;;;OAMG;IACH,8BAAY,OAAe,EAAE,GAAW,EAAE,OAAuC;QAAjF,iBAwBC;QAvBC,IAAI,OAAO,IAAI,SAAS,EAAE;YACxB,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;SAC9C;QACD,IAAI,GAAG,IAAI,SAAS,EAAE;YACpB,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;SAC1C;QAED,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,GAAG,EAAE,CAAC;SACd;QAED,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;YACtB,IAAM,gBAAgB,GAAG,QAAQ,CAAC,wBAAwB,EAAE,CAAC;YAC7D,OAAO,CAAC,SAAS,GAAM,WAAW,SAAI,cAAc,SAAI,gBAAkB,CAAC;SAC5E;QAED,QAAA,kBAAM,SAAS,EAAE,OAAO,CAAC,SAAC;QAE1B,KAAI,CAAC,qBAAqB,GAAG,QAAQ,CAAC;QACtC,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,KAAI,CAAC,kBAAkB,GAAG,iCAAiC,CAAC;QAC5D,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;;IACjB,CAAC;IACH,2BAAC;AAAD,CAAC,AArCD,CAA0C,QAAQ,CAAC,aAAa,GAqC/D","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\nconst packageName = \"azure-storage-file-share\";\nconst packageVersion = \"12.2.0\";\n\nexport class StorageClientContext extends coreHttp.ServiceClient {\n  version: string;\n  fileRangeWriteFromUrl: string;\n  url: string;\n\n  /**\n   * Initializes a new instance of the StorageClientContext class.\n   * @param version Specifies the version of the operation to use for this request.\n   * @param url The URL of the service account, share, directory or file that is the target of the\n   * desired operation.\n   * @param [options] The parameter options\n   */\n  constructor(version: string, url: string, options?: coreHttp.ServiceClientOptions) {\n    if (version == undefined) {\n      throw new Error(\"'version' cannot be null.\");\n    }\n    if (url == undefined) {\n      throw new Error(\"'url' cannot be null.\");\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    if (!options.userAgent) {\n      const defaultUserAgent = coreHttp.getDefaultUserAgentValue();\n      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;\n    }\n\n    super(undefined, options);\n\n    this.fileRangeWriteFromUrl = 'update';\n    this.baseUri = \"{url}\";\n    this.requestContentType = \"application/json; charset=utf-8\";\n    this.version = version;\n    this.url = url;\n  }\n}\n"]}